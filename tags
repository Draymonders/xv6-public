!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/bing/xv6-public/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
.bss	kernel.ld	/^	.bss : {$/;"	S
.data	kernel.ld	/^	.data : {$/;"	S
.gdbinit	Makefile	/^.gdbinit: .gdbinit.tmpl$/;"	t
.rodata	kernel.ld	/^	.rodata : {$/;"	S
.stab	kernel.ld	/^	.stab : {$/;"	S
.stabstr	kernel.ld	/^	.stabstr : {$/;"	S
.text	kernel.ld	/^	.text : AT(0x100000) {$/;"	S
ALT	kbd.h	/^#define ALT /;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	/^  #define ASSERT /;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	typeref:typename:long	file:
BACK	sh.c	/^#define BACK /;"	d	file:
BACKSPACE	console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	fs.h	/^#define BBLOCK(/;"	d
BCAST	lapic.c	/^  #define BCAST /;"	d	file:
BIG	usertests.asm	/^#define BIG /;"	d	file:
BIG	usertests.c	/^#define BIG /;"	d	file:
BPB	fs.h	/^#define BPB /;"	d
BSIZE	fs.h	/^#define BSIZE /;"	d
BUSY	lapic.c	/^  #define BUSY /;"	d	file:
B_DIRTY	buf.h	/^#define B_DIRTY /;"	d
B_VALID	buf.h	/^#define B_VALID /;"	d
C	console.c	/^#define C(/;"	d	file:
C	kbd.h	/^#define C(/;"	d
C	kernel.asm	/^#define C(/;"	d	file:
CAPSLOCK	kbd.h	/^#define CAPSLOCK /;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O0 -Wall -MD -ggdb -m32 -Werror -fn/;"	m
CMOS_PORT	lapic.c	/^#define CMOS_PORT /;"	d	file:
CMOS_RETURN	lapic.c	/^#define CMOS_RETURN /;"	d	file:
CMOS_STATA	lapic.c	/^#define CMOS_STATA /;"	d	file:
CMOS_STATB	lapic.c	/^#define CMOS_STATB /;"	d	file:
CMOS_UIP	lapic.c	/^#define CMOS_UIP /;"	d	file:
COM1	uart.c	/^#define COM1 /;"	d	file:
CONSOLE	file.h	/^#define CONSOLE /;"	d
CONV	kernel.asm	/^#define    CONV(/;"	d	file:
CONV	lapic.c	/^#define    CONV(/;"	d	file:
CPUS	Makefile	/^CPUS := 1 $/;"	m
CR0_PE	mmu.h	/^#define CR0_PE /;"	d
CR0_PG	mmu.h	/^#define CR0_PG /;"	d
CR0_WP	mmu.h	/^#define CR0_WP /;"	d
CR4_PSE	mmu.h	/^#define CR4_PSE /;"	d
CRTPORT	console.c	/^#define CRTPORT /;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT /;"	d	file:
CTL	kbd.h	/^#define CTL /;"	d
DAY	lapic.c	/^#define DAY /;"	d	file:
DEASSERT	lapic.c	/^  #define DEASSERT /;"	d	file:
DELIVS	lapic.c	/^  #define DELIVS /;"	d	file:
DEVSPACE	memlayout.h	/^#define DEVSPACE /;"	d
DIRSIZ	fs.h	/^#define DIRSIZ /;"	d
DPL_USER	mmu.h	/^#define DPL_USER /;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	/^#define E0ESC /;"	d
ELF_MAGIC	elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	elf.h	/^#define ELF_PROG_LOAD /;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	/^  #define ENABLE /;"	d	file:
EOI	lapic.c	/^#define EOI /;"	d	file:
ERROR	lapic.c	/^#define ERROR /;"	d	file:
ESR	lapic.c	/^#define ESR /;"	d	file:
EXEC	sh.c	/^#define EXEC /;"	d	file:
EXTMEM	memlayout.h	/^#define EXTMEM /;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	/^  #define FIXED /;"	d	file:
FL_IF	mmu.h	/^#define FL_IF /;"	d
FSSIZE	param.h	/^#define FSSIZE /;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	/^#define HOURS /;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	/^#define IBLOCK(/;"	d
ICRHI	lapic.c	/^#define ICRHI /;"	d	file:
ICRLO	lapic.c	/^#define ICRLO /;"	d	file:
ID	lapic.c	/^#define ID /;"	d	file:
IDE_BSY	ide.c	/^#define IDE_BSY /;"	d	file:
IDE_CMD_RDMUL	ide.c	/^#define IDE_CMD_RDMUL /;"	d	file:
IDE_CMD_READ	ide.c	/^#define IDE_CMD_READ /;"	d	file:
IDE_CMD_WRITE	ide.c	/^#define IDE_CMD_WRITE /;"	d	file:
IDE_CMD_WRMUL	ide.c	/^#define IDE_CMD_WRMUL /;"	d	file:
IDE_DF	ide.c	/^#define IDE_DF /;"	d	file:
IDE_DRDY	ide.c	/^#define IDE_DRDY /;"	d	file:
IDE_ERR	ide.c	/^#define IDE_ERR /;"	d	file:
INIT	lapic.c	/^  #define INIT /;"	d	file:
INPUT_BUF	console.c	/^#define INPUT_BUF /;"	d	file:
INT_ACTIVELOW	ioapic.c	/^#define INT_ACTIVELOW /;"	d	file:
INT_DISABLED	ioapic.c	/^#define INT_DISABLED /;"	d	file:
INT_LEVEL	ioapic.c	/^#define INT_LEVEL /;"	d	file:
INT_LOGICAL	ioapic.c	/^#define INT_LOGICAL /;"	d	file:
IOAPIC	ioapic.c	/^#define IOAPIC /;"	d	file:
IO_PIC1	picirq.c	/^#define IO_PIC1 /;"	d	file:
IO_PIC2	kernel.asm	/^#define IO_PIC2 /;"	d	file:
IO_PIC2	picirq.c	/^#define IO_PIC2 /;"	d	file:
IPB	fs.h	/^#define IPB /;"	d
IRQ_COM1	traps.h	/^#define IRQ_COM1 /;"	d
IRQ_ERROR	traps.h	/^#define IRQ_ERROR /;"	d
IRQ_IDE	traps.h	/^#define IRQ_IDE /;"	d
IRQ_KBD	traps.h	/^#define IRQ_KBD /;"	d
IRQ_SPURIOUS	traps.h	/^#define IRQ_SPURIOUS /;"	d
IRQ_TIMER	traps.h	/^#define IRQ_TIMER /;"	d
KBDATAP	kbd.h	/^#define KBDATAP /;"	d
KBSTATP	kbd.h	/^#define KBSTATP /;"	d
KBS_DIB	kbd.h	/^#define KBS_DIB /;"	d
KERNBASE	memlayout.h	/^#define KERNBASE /;"	d
KERNLINK	memlayout.h	/^#define KERNLINK /;"	d
KEY_DEL	kbd.h	/^#define KEY_DEL /;"	d
KEY_DN	kbd.h	/^#define KEY_DN /;"	d
KEY_END	kbd.h	/^#define KEY_END /;"	d
KEY_HOME	kbd.h	/^#define KEY_HOME /;"	d
KEY_INS	kbd.h	/^#define KEY_INS /;"	d
KEY_LF	kbd.h	/^#define KEY_LF /;"	d
KEY_PGDN	kbd.h	/^#define KEY_PGDN /;"	d
KEY_PGUP	kbd.h	/^#define KEY_PGUP /;"	d
KEY_RT	kbd.h	/^#define KEY_RT /;"	d
KEY_UP	kbd.h	/^#define KEY_UP /;"	d
KSTACKSIZE	param.h	/^#define KSTACKSIZE /;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	/^  #define LEVEL /;"	d	file:
LINT0	lapic.c	/^#define LINT0 /;"	d	file:
LINT1	lapic.c	/^#define LINT1 /;"	d	file:
LIST	sh.c	/^#define LIST /;"	d	file:
LOGSIZE	param.h	/^#define LOGSIZE /;"	d
MASKED	lapic.c	/^  #define MASKED /;"	d	file:
MAXARG	param.h	/^#define MAXARG /;"	d
MAXARGS	sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	fs.h	/^#define MAXFILE /;"	d
MAXOPBLOCKS	param.h	/^#define MAXOPBLOCKS /;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	/^#define MINS /;"	d	file:
MONTH	kernel.asm	/^#define MONTH /;"	d	file:
MONTH	lapic.c	/^#define MONTH /;"	d	file:
MPBOOT	mp.h	/^    #define MPBOOT /;"	d
MPBUS	mp.h	/^#define MPBUS /;"	d
MPIOAPIC	mp.h	/^#define MPIOAPIC /;"	d
MPIOINTR	mp.h	/^#define MPIOINTR /;"	d
MPLINTR	mp.h	/^#define MPLINTR /;"	d
MPPROC	mp.h	/^#define MPPROC /;"	d
N	forktest.asm	/^#define N /;"	d	file:
N	forktest.c	/^#define N /;"	d	file:
N	usertests.c	/^  enum { N = 20 };$/;"	e	enum:createdelete::__anonaf504e680103	file:
NBUF	param.h	/^#define NBUF /;"	d
NCPU	param.h	/^#define NCPU /;"	d
NDEV	param.h	/^#define NDEV /;"	d
NDIRECT	fs.h	/^#define NDIRECT /;"	d
NELEM	defs.h	/^#define NELEM(/;"	d
NFILE	param.h	/^#define NFILE /;"	d
NINDIRECT	fs.h	/^#define NINDIRECT /;"	d
NINODE	param.h	/^#define NINODE /;"	d
NINODES	mkfs.c	/^#define NINODES /;"	d	file:
NO	kbd.h	/^#define NO /;"	d
NOFILE	param.h	/^#define NOFILE /;"	d
NPDENTRIES	mmu.h	/^#define NPDENTRIES /;"	d
NPROC	param.h	/^#define NPROC /;"	d
NPTENTRIES	mmu.h	/^#define NPTENTRIES /;"	d
NSEGS	mmu.h	/^#define NSEGS /;"	d
NUMLOCK	kbd.h	/^#define NUMLOCK /;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	/^#define O_CREATE /;"	d
O_RDONLY	fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	fcntl.h	/^#define O_RDWR /;"	d
O_WRONLY	fcntl.h	/^#define O_WRONLY /;"	d
P2V	memlayout.h	/^#define P2V(/;"	d
P2V_WO	memlayout.h	/^#define P2V_WO(/;"	d
PCINT	lapic.c	/^#define PCINT /;"	d	file:
PDX	mmu.h	/^#define PDX(/;"	d
PDXSHIFT	mmu.h	/^#define PDXSHIFT /;"	d
PERIODIC	lapic.c	/^  #define PERIODIC /;"	d	file:
PGADDR	mmu.h	/^#define PGADDR(/;"	d
PGROUNDDOWN	mmu.h	/^#define PGROUNDDOWN(/;"	d
PGROUNDUP	mmu.h	/^#define PGROUNDUP(/;"	d
PGSIZE	mmu.h	/^#define PGSIZE /;"	d
PHYSTOP	memlayout.h	/^#define PHYSTOP /;"	d
PIPE	sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	pipe.c	/^#define PIPESIZE /;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	/^#define PTE_ADDR(/;"	d
PTE_FLAGS	mmu.h	/^#define PTE_FLAGS(/;"	d
PTE_P	mmu.h	/^#define PTE_P /;"	d
PTE_PS	mmu.h	/^#define PTE_PS /;"	d
PTE_U	mmu.h	/^#define PTE_U /;"	d
PTE_W	mmu.h	/^#define PTE_W /;"	d
PTX	mmu.h	/^#define PTX(/;"	d
PTXSHIFT	mmu.h	/^#define PTXSHIFT /;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=di/;"	m
REDIR	sh.c	/^#define REDIR /;"	d	file:
REG_ID	ioapic.c	/^#define REG_ID /;"	d	file:
REG_TABLE	ioapic.c	/^#define REG_TABLE /;"	d	file:
REG_VER	ioapic.c	/^#define REG_VER /;"	d	file:
ROOTDEV	param.h	/^#define ROOTDEV /;"	d
ROOTINO	fs.h	/^#define ROOTINO /;"	d
RTC_ADDR	usertests.asm	/^  #define RTC_ADDR /;"	d	file:
RTC_ADDR	usertests.c	/^  #define RTC_ADDR /;"	d	file:
RTC_DATA	usertests.asm	/^  #define RTC_DATA /;"	d	file:
RTC_DATA	usertests.c	/^  #define RTC_DATA /;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	/^#define SCROLLLOCK /;"	d
SECS	lapic.c	/^#define SECS /;"	d	file:
SECTOR_SIZE	ide.c	/^#define SECTOR_SIZE /;"	d	file:
SECTSIZE	bootmain.c	/^#define SECTSIZE /;"	d	file:
SEG	mmu.h	/^#define SEG(/;"	d
SEG16	mmu.h	/^#define SEG16(/;"	d
SEG_ASM	asm.h	/^#define SEG_ASM(/;"	d
SEG_KCODE	mmu.h	/^#define SEG_KCODE /;"	d
SEG_KDATA	mmu.h	/^#define SEG_KDATA /;"	d
SEG_NULLASM	asm.h	/^#define SEG_NULLASM /;"	d
SEG_TSS	mmu.h	/^#define SEG_TSS /;"	d
SEG_UCODE	mmu.h	/^#define SEG_UCODE /;"	d
SEG_UDATA	mmu.h	/^#define SEG_UDATA /;"	d
SETGATE	mmu.h	/^#define SETGATE(/;"	d
SHIFT	kbd.h	/^#define SHIFT /;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	/^  #define STARTUP /;"	d	file:
STA_R	asm.h	/^#define STA_R /;"	d
STA_R	mmu.h	/^#define STA_R /;"	d
STA_W	asm.h	/^#define STA_W /;"	d
STA_W	mmu.h	/^#define STA_W /;"	d
STA_X	asm.h	/^#define STA_X /;"	d
STA_X	mmu.h	/^#define STA_X /;"	d
STS_IG32	mmu.h	/^#define STS_IG32 /;"	d
STS_T32A	mmu.h	/^#define STS_T32A /;"	d
STS_TG32	mmu.h	/^#define STS_TG32 /;"	d
SVR	lapic.c	/^#define SVR /;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(/;"	d	file:
SYS_chdir	syscall.h	/^#define SYS_chdir /;"	d
SYS_close	syscall.h	/^#define SYS_close /;"	d
SYS_dup	syscall.h	/^#define SYS_dup /;"	d
SYS_exec	syscall.h	/^#define SYS_exec /;"	d
SYS_exit	syscall.h	/^#define SYS_exit /;"	d
SYS_fork	syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	syscall.h	/^#define SYS_fstat /;"	d
SYS_getpid	syscall.h	/^#define SYS_getpid /;"	d
SYS_kill	syscall.h	/^#define SYS_kill /;"	d
SYS_link	syscall.h	/^#define SYS_link /;"	d
SYS_mkdir	syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	syscall.h	/^#define SYS_mknod /;"	d
SYS_open	syscall.h	/^#define SYS_open /;"	d
SYS_pipe	syscall.h	/^#define SYS_pipe /;"	d
SYS_read	syscall.h	/^#define SYS_read /;"	d
SYS_sbrk	syscall.h	/^#define SYS_sbrk /;"	d
SYS_sleep	syscall.h	/^#define SYS_sleep /;"	d
SYS_unlink	syscall.h	/^#define SYS_unlink /;"	d
SYS_uptime	syscall.h	/^#define SYS_uptime /;"	d
SYS_wait	syscall.h	/^#define SYS_wait /;"	d
SYS_write	syscall.h	/^#define SYS_write /;"	d
TCCR	lapic.c	/^#define TCCR /;"	d	file:
TDCR	lapic.c	/^#define TDCR /;"	d	file:
TICR	lapic.c	/^#define TICR /;"	d	file:
TIMER	lapic.c	/^#define TIMER /;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; /;"	m
TPR	lapic.c	/^#define TPR /;"	d	file:
T_ALIGN	traps.h	/^#define T_ALIGN /;"	d
T_BOUND	traps.h	/^#define T_BOUND /;"	d
T_BRKPT	traps.h	/^#define T_BRKPT /;"	d
T_DBLFLT	traps.h	/^#define T_DBLFLT /;"	d
T_DEBUG	traps.h	/^#define T_DEBUG /;"	d
T_DEFAULT	traps.h	/^#define T_DEFAULT /;"	d
T_DEV	stat.h	/^#define T_DEV /;"	d
T_DEVICE	traps.h	/^#define T_DEVICE /;"	d
T_DIR	stat.h	/^#define T_DIR /;"	d
T_DIVIDE	traps.h	/^#define T_DIVIDE /;"	d
T_FILE	stat.h	/^#define T_FILE /;"	d
T_FPERR	traps.h	/^#define T_FPERR /;"	d
T_GPFLT	traps.h	/^#define T_GPFLT /;"	d
T_ILLOP	traps.h	/^#define T_ILLOP /;"	d
T_IRQ0	traps.h	/^#define T_IRQ0 /;"	d
T_MCHK	traps.h	/^#define T_MCHK /;"	d
T_NMI	traps.h	/^#define T_NMI /;"	d
T_OFLOW	traps.h	/^#define T_OFLOW /;"	d
T_PGFLT	traps.h	/^#define T_PGFLT /;"	d
T_SEGNP	traps.h	/^#define T_SEGNP /;"	d
T_SIMDERR	traps.h	/^#define T_SIMDERR /;"	d
T_STACK	traps.h	/^#define T_STACK /;"	d
T_SYSCALL	traps.h	/^#define T_SYSCALL /;"	d
T_TSS	traps.h	/^#define T_TSS /;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	/^#define V2P(/;"	d
V2P_WO	memlayout.h	/^#define V2P_WO(/;"	d
VER	lapic.c	/^#define VER /;"	d	file:
X1	lapic.c	/^  #define X1 /;"	d	file:
YEAR	kernel.asm	/^#define YEAR /;"	d	file:
YEAR	lapic.c	/^#define YEAR /;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_%	Makefile	/^_%: %.o $(ULIB)$/;"	t
__STABSTR_BEGIN__	kernel.ld	/^		PROVIDE(__STABSTR_BEGIN__ = .);$/;"	s	section:.stabstr	assignment:provide
__STABSTR_END__	kernel.ld	/^		PROVIDE(__STABSTR_END__ = .);$/;"	s	section:.stabstr	assignment:provide
__STAB_BEGIN__	kernel.ld	/^		PROVIDE(__STAB_BEGIN__ = .);$/;"	s	section:.stab	assignment:provide
__STAB_END__	kernel.ld	/^		PROVIDE(__STAB_END__ = .);$/;"	s	section:.stab	assignment:provide
__anon0f27d3d00108	bio.c	/^struct {$/;"	s	file:
__anon156e3e2a0108	proc.c	/^struct {$/;"	s	file:
__anon69d64d0c0108	kalloc.c	/^struct {$/;"	s	file:
__anon7c96edaf0108	fs.c	/^struct {$/;"	s	file:
__anon96a473a90108	console.c	/^static struct {$/;"	s	file:
__anon96a473a90208	console.c	/^struct {$/;"	s	file:
__anonaf504e680103	usertests.c	/^  enum { N = 20 };$/;"	g	function:createdelete	file:
__anonaf504e680208	usertests.c	/^  struct {$/;"	s	function:concreate	file:
__anonf5a2dce30108	umalloc.c	/^  struct {$/;"	s	union:header	file:
__anonfd762eb60108	file.c	/^struct {$/;"	s	file:
__anonfd762ebb0103	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	g	struct:file
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	Makefile	/^_forktest: forktest.o $(ULIB)$/;"	t
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ls.asm	/^   a:	ff 75 08             	push   0x8(%ebp)$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	75 05                	jne    11 <runcmd+0x11>$/;"	l
a	stressfs.asm	/^   a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	cat.asm	/^  a0:	e8 dd 02 00 00       	call   382 <exit>$/;"	l
a0	ln.asm	/^  a0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a0	ls.asm	/^  a0:	53                   	push   %ebx$/;"	l
a0	mkdir.asm	/^  a0:	89 df                	mov    %ebx,%edi$/;"	l
a0	rm.asm	/^  a0:	89 df                	mov    %ebx,%edi$/;"	l
a0	stressfs.asm	/^  a0:	50                   	push   %eax$/;"	l
a0	wc.asm	/^  a0:	83 c4 10             	add    $0x10,%esp$/;"	l
a00	usertests.asm	/^     a00:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a02	ls.asm	/^ a02:	75 23                	jne    a27 <malloc+0x46>$/;"	l
a02	sh.asm	/^     a02:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a03	grep.asm	/^ a03:	a3 e0 11 00 00       	mov    %eax,0x11e0$/;"	l
a04	ls.asm	/^ a04:	c7 45 f0 d8 0d 00 00 	movl   $0xdd8,-0x10(%ebp)$/;"	l
a04	usertests.asm	/^     a04:	0f 85 89 00 00 00    	jne    a93 <pipe1+0xd2>$/;"	l
a05	sh.asm	/^     a05:	ff 75 08             	push   0x8(%ebp)$/;"	l
a08	grep.asm	/^ a08:	c7 05 e4 11 00 00 00 	movl   $0x0,0x11e4$/;"	l
a08	sh.asm	/^     a08:	e8 90 fc ff ff       	call   69d <peek>$/;"	l
a0a	usertests.asm	/^     a0a:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
a0b	ls.asm	/^ a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a0d	sh.asm	/^     a0d:	83 c4 10             	add    $0x10,%esp$/;"	l
a0d	usertests.asm	/^     a0d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0e	ls.asm	/^ a0e:	a3 e0 0d 00 00       	mov    %eax,0xde0$/;"	l
a0f	grep.asm	/^ a0f:	00 00 00 $/;"	l
a1	echo.asm	/^  a1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a1	forktest.asm	/^  a1:	83 ec 08             	sub    $0x8,%esp$/;"	l
a1	kill.asm	/^  a1:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a1	ls.asm	/^  a1:	6a 20                	push   $0x20$/;"	l
a1	sh.asm	/^      a1:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a1	stressfs.asm	/^  a1:	e8 43 03 00 00       	call   3e9 <open>$/;"	l
a1	usertests.asm	/^      a1:	83 c4 10             	add    $0x10,%esp$/;"	l
a10	sh.asm	/^     a10:	85 c0                	test   %eax,%eax$/;"	l
a10	usertests.asm	/^     a10:	50                   	push   %eax$/;"	l
a11	usertests.asm	/^     a11:	e8 1a 36 00 00       	call   4030 <close>$/;"	l
a12	grep.asm	/^ a12:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a12	sh.asm	/^     a12:	75 10                	jne    a24 <parseblock+0x80>$/;"	l
a13	ls.asm	/^ a13:	a1 e0 0d 00 00       	mov    0xde0,%eax$/;"	l
a14	sh.asm	/^     a14:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a15	grep.asm	/^ a15:	8b 00                	mov    (%eax),%eax$/;"	l
a16	usertests.asm	/^     a16:	83 c4 10             	add    $0x10,%esp$/;"	l
a17	grep.asm	/^ a17:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a17	sh.asm	/^     a17:	68 b6 14 00 00       	push   $0x14b6$/;"	l
a18	ls.asm	/^ a18:	a3 d8 0d 00 00       	mov    %eax,0xdd8$/;"	l
a19	usertests.asm	/^     a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
a1a	grep.asm	/^ a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a1c	sh.asm	/^     a1c:	e8 7b f9 ff ff       	call   39c <panic>$/;"	l
a1d	grep.asm	/^ a1d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a1d	ls.asm	/^ a1d:	c7 05 dc 0d 00 00 00 	movl   $0x0,0xddc$/;"	l
a2	grep.asm	/^  a2:	2d e0 0d 00 00       	sub    $0xde0,%eax$/;"	l
a2	init.asm	/^  a2:	75 3e                	jne    e2 <main+0xe2>$/;"	l
a2	mkdir.asm	/^  a2:	89 d1                	mov    %edx,%ecx$/;"	l
a2	rm.asm	/^  a2:	89 d1                	mov    %edx,%ecx$/;"	l
a2	zombie.asm	/^  a2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a20	grep.asm	/^ a20:	39 45 ec             	cmp    %eax,-0x14(%ebp)$/;"	l
a20	usertests.asm	/^     a20:	eb 66                	jmp    a88 <pipe1+0xc7>$/;"	l
a21	sh.asm	/^     a21:	83 c4 10             	add    $0x10,%esp$/;"	l
a22	usertests.asm	/^     a22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
a23	grep.asm	/^ a23:	77 4d                	ja     a72 <malloc+0xa6>$/;"	l
a24	ls.asm	/^ a24:	00 00 00 $/;"	l
a24	sh.asm	/^     a24:	6a 00                	push   $0x0$/;"	l
a25	grep.asm	/^ a25:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a26	sh.asm	/^     a26:	6a 00                	push   $0x0$/;"	l
a27	ls.asm	/^ a27:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a28	grep.asm	/^ a28:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a28	sh.asm	/^     a28:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a29	usertests.asm	/^     a29:	eb 19                	jmp    a44 <pipe1+0x83>$/;"	l
a2a	ls.asm	/^ a2a:	8b 00                	mov    (%eax),%eax$/;"	l
a2b	grep.asm	/^ a2b:	39 45 ec             	cmp    %eax,-0x14(%ebp)$/;"	l
a2b	sh.asm	/^     a2b:	ff 75 08             	push   0x8(%ebp)$/;"	l
a2b	usertests.asm	/^     a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a2c	ls.asm	/^ a2c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a2e	grep.asm	/^ a2e:	75 0c                	jne    a3c <malloc+0x70>$/;"	l
a2e	sh.asm	/^     a2e:	e8 1a fb ff ff       	call   54d <gettoken>$/;"	l
a2e	usertests.asm	/^     a2e:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
a2f	ls.asm	/^ a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a3	ln.asm	/^  a3:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a3	ls.asm	/^  a3:	50                   	push   %eax$/;"	l
a3	wc.asm	/^  a3:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
a30	grep.asm	/^ a30:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a31	usertests.asm	/^     a31:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
a32	ls.asm	/^ a32:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a33	grep.asm	/^ a33:	8b 10                	mov    (%eax),%edx$/;"	l
a33	sh.asm	/^     a33:	83 c4 10             	add    $0x10,%esp$/;"	l
a34	usertests.asm	/^     a34:	89 c2                	mov    %eax,%edx$/;"	l
a35	grep.asm	/^ a35:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a35	ls.asm	/^ a35:	39 45 ec             	cmp    %eax,-0x14(%ebp)$/;"	l
a36	sh.asm	/^     a36:	83 ec 04             	sub    $0x4,%esp$/;"	l
a36	usertests.asm	/^     a36:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a38	grep.asm	/^ a38:	89 10                	mov    %edx,(%eax)$/;"	l
a38	ls.asm	/^ a38:	77 4d                	ja     a87 <malloc+0xa6>$/;"	l
a39	sh.asm	/^     a39:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a39	usertests.asm	/^     a39:	05 c0 64 00 00       	add    $0x64c0,%eax$/;"	l
a3a	grep.asm	/^ a3a:	eb 26                	jmp    a62 <malloc+0x96>$/;"	l
a3a	ls.asm	/^ a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a3c	grep.asm	/^ a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a3c	sh.asm	/^     a3c:	ff 75 08             	push   0x8(%ebp)$/;"	l
a3d	ls.asm	/^ a3d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a3e	usertests.asm	/^     a3e:	88 10                	mov    %dl,(%eax)$/;"	l
a3f	grep.asm	/^ a3f:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a3f	sh.asm	/^     a3f:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
a4	echo.asm	/^  a4:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
a4	forktest.asm	/^  a4:	68 2b 04 00 00       	push   $0x42b$/;"	l
a4	init.asm	/^  a4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	kill.asm	/^  a4:	90                   	nop$/;"	l
a4	ls.asm	/^  a4:	e8 55 03 00 00       	call   3fe <memset>$/;"	l
a4	mkdir.asm	/^  a4:	fc                   	cld    $/;"	l
a4	rm.asm	/^  a4:	fc                   	cld    $/;"	l
a4	sh.asm	/^      a4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	usertests.asm	/^      a4:	e8 5f 3f 00 00       	call   4008 <exit>$/;"	l
a40	ls.asm	/^ a40:	39 45 ec             	cmp    %eax,-0x14(%ebp)$/;"	l
a40	usertests.asm	/^     a40:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
a42	grep.asm	/^ a42:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
a42	sh.asm	/^     a42:	e8 75 fe ff ff       	call   8bc <parseredirs>$/;"	l
a43	ls.asm	/^ a43:	75 0c                	jne    a51 <malloc+0x70>$/;"	l
a44	usertests.asm	/^     a44:	81 7d f0 08 04 00 00 	cmpl   $0x408,-0x10(%ebp)$/;"	l
a45	grep.asm	/^ a45:	89 c2                	mov    %eax,%edx$/;"	l
a45	ls.asm	/^ a45:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a47	grep.asm	/^ a47:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a47	sh.asm	/^     a47:	83 c4 10             	add    $0x10,%esp$/;"	l
a48	ls.asm	/^ a48:	8b 10                	mov    (%eax),%edx$/;"	l
a4a	grep.asm	/^ a4a:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a4a	ls.asm	/^ a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a4a	sh.asm	/^     a4a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a4b	usertests.asm	/^     a4b:	7e de                	jle    a2b <pipe1+0x6a>$/;"	l
a4d	grep.asm	/^ a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4d	ls.asm	/^ a4d:	89 10                	mov    %edx,(%eax)$/;"	l
a4d	sh.asm	/^     a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4d	usertests.asm	/^     a4d:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a4f	ls.asm	/^ a4f:	eb 26                	jmp    a77 <malloc+0x96>$/;"	l
a5	cat.asm	/^  a5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)$/;"	l
a5	kill.asm	/^  a5:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a5	mkdir.asm	/^  a5:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a5	rm.asm	/^  a5:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a5	zombie.asm	/^  a5:	38 c2                	cmp    %al,%dl$/;"	l
a50	grep.asm	/^ a50:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a50	sh.asm	/^     a50:	c9                   	leave  $/;"	l
a50	usertests.asm	/^     a50:	83 ec 04             	sub    $0x4,%esp$/;"	l
a51	ls.asm	/^ a51:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a51	sh.asm	/^     a51:	c3                   	ret    $/;"	l
a52	sh.asm	/^     a52:	55                   	push   %ebp$/;"	l
a53	grep.asm	/^ a53:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a53	sh.asm	/^     a53:	89 e5                	mov    %esp,%ebp$/;"	l
a53	usertests.asm	/^     a53:	68 09 04 00 00       	push   $0x409$/;"	l
a54	ls.asm	/^ a54:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a55	sh.asm	/^     a55:	83 ec 28             	sub    $0x28,%esp$/;"	l
a56	grep.asm	/^ a56:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
a57	ls.asm	/^ a57:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
a58	sh.asm	/^     a58:	83 ec 04             	sub    $0x4,%esp$/;"	l
a58	usertests.asm	/^     a58:	68 c0 64 00 00       	push   $0x64c0$/;"	l
a59	grep.asm	/^ a59:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a5a	ls.asm	/^ a5a:	89 c2                	mov    %eax,%edx$/;"	l
a5b	sh.asm	/^     a5b:	68 a7 14 00 00       	push   $0x14a7$/;"	l
a5c	grep.asm	/^ a5c:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
a5c	ls.asm	/^ a5c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a5d	usertests.asm	/^     a5d:	50                   	push   %eax$/;"	l
a5e	usertests.asm	/^     a5e:	e8 c5 35 00 00       	call   4028 <write>$/;"	l
a5f	grep.asm	/^ a5f:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a5f	ls.asm	/^ a5f:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a6	ln.asm	/^  a6:	90                   	nop$/;"	l
a6	stressfs.asm	/^  a6:	83 c4 10             	add    $0x10,%esp$/;"	l
a6	wc.asm	/^  a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a60	sh.asm	/^     a60:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a62	grep.asm	/^ a62:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a62	ls.asm	/^ a62:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a63	sh.asm	/^     a63:	ff 75 08             	push   0x8(%ebp)$/;"	l
a63	usertests.asm	/^     a63:	83 c4 10             	add    $0x10,%esp$/;"	l
a65	grep.asm	/^ a65:	a3 e8 11 00 00       	mov    %eax,0x11e8$/;"	l
a65	ls.asm	/^ a65:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a66	sh.asm	/^     a66:	e8 32 fc ff ff       	call   69d <peek>$/;"	l
a66	usertests.asm	/^     a66:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
a68	ls.asm	/^ a68:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a6a	grep.asm	/^ a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a6b	ls.asm	/^ a6b:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
a6b	sh.asm	/^     a6b:	83 c4 10             	add    $0x10,%esp$/;"	l
a6b	usertests.asm	/^     a6b:	74 17                	je     a84 <pipe1+0xc3>$/;"	l
a6d	grep.asm	/^ a6d:	83 c0 08             	add    $0x8,%eax$/;"	l
a6d	usertests.asm	/^     a6d:	83 ec 08             	sub    $0x8,%esp$/;"	l
a6e	ls.asm	/^ a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a6e	sh.asm	/^     a6e:	85 c0                	test   %eax,%eax$/;"	l
a7	echo.asm	/^  a7:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
a7	grep.asm	/^  a7:	29 45 f4             	sub    %eax,-0xc(%ebp)$/;"	l
a7	init.asm	/^  a7:	68 20 0b 00 00       	push   $0xb20$/;"	l
a7	ln.asm	/^  a7:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a7	mkdir.asm	/^  a7:	89 ca                	mov    %ecx,%edx$/;"	l
a7	rm.asm	/^  a7:	89 ca                	mov    %ecx,%edx$/;"	l
a7	sh.asm	/^      a7:	52                   	push   %edx$/;"	l
a7	zombie.asm	/^  a7:	74 de                	je     87 <strcmp+0x5>$/;"	l
a70	grep.asm	/^ a70:	eb 3b                	jmp    aad <malloc+0xe1>$/;"	l
a70	sh.asm	/^     a70:	74 16                	je     a88 <parseexec+0x36>$/;"	l
a70	usertests.asm	/^     a70:	68 b5 49 00 00       	push   $0x49b5$/;"	l
a71	ls.asm	/^ a71:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
a72	grep.asm	/^ a72:	a1 e8 11 00 00       	mov    0x11e8,%eax$/;"	l
a72	sh.asm	/^     a72:	83 ec 08             	sub    $0x8,%esp$/;"	l
a74	ls.asm	/^ a74:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a75	sh.asm	/^     a75:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a75	usertests.asm	/^     a75:	6a 01                	push   $0x1$/;"	l
a77	grep.asm	/^ a77:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
a77	ls.asm	/^ a77:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a77	usertests.asm	/^     a77:	e8 00 37 00 00       	call   417c <printf>$/;"	l
a78	sh.asm	/^     a78:	ff 75 08             	push   0x8(%ebp)$/;"	l
a7a	grep.asm	/^ a7a:	75 1e                	jne    a9a <malloc+0xce>$/;"	l
a7a	ls.asm	/^ a7a:	a3 e0 0d 00 00       	mov    %eax,0xde0$/;"	l
a7b	sh.asm	/^     a7b:	e8 24 ff ff ff       	call   9a4 <parseblock>$/;"	l
a7c	grep.asm	/^ a7c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a7c	usertests.asm	/^     a7c:	83 c4 10             	add    $0x10,%esp$/;"	l
a7f	grep.asm	/^ a7f:	ff 75 ec             	push   -0x14(%ebp)$/;"	l
a7f	ls.asm	/^ a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a7f	usertests.asm	/^     a7f:	e8 84 35 00 00       	call   4008 <exit>$/;"	l
a8	kill.asm	/^  a8:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
a8	sh.asm	/^      a8:	50                   	push   %eax$/;"	l
a80	sh.asm	/^     a80:	83 c4 10             	add    $0x10,%esp$/;"	l
a82	grep.asm	/^ a82:	e8 e5 fe ff ff       	call   96c <morecore>$/;"	l
a82	ls.asm	/^ a82:	83 c0 08             	add    $0x8,%eax$/;"	l
a83	sh.asm	/^     a83:	e9 fb 00 00 00       	jmp    b83 <parseexec+0x131>$/;"	l
a84	usertests.asm	/^     a84:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
a85	ls.asm	/^ a85:	eb 3b                	jmp    ac2 <malloc+0xe1>$/;"	l
a87	grep.asm	/^ a87:	83 c4 10             	add    $0x10,%esp$/;"	l
a87	ls.asm	/^ a87:	a1 e0 0d 00 00       	mov    0xde0,%eax$/;"	l
a88	sh.asm	/^     a88:	e8 58 f9 ff ff       	call   3e5 <execcmd>$/;"	l
a88	usertests.asm	/^     a88:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)$/;"	l
a8a	grep.asm	/^ a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a8c	ls.asm	/^ a8c:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
a8c	usertests.asm	/^     a8c:	7e 94                	jle    a22 <pipe1+0x61>$/;"	l
a8d	grep.asm	/^ a8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a8d	sh.asm	/^     a8d:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a8e	usertests.asm	/^     a8e:	e8 75 35 00 00       	call   4008 <exit>$/;"	l
a8f	ls.asm	/^ a8f:	75 1e                	jne    aaf <malloc+0xce>$/;"	l
a9	forktest.asm	/^  a9:	6a 01                	push   $0x1$/;"	l
a9	ls.asm	/^  a9:	83 c4 10             	add    $0x10,%esp$/;"	l
a9	mkdir.asm	/^  a9:	89 fb                	mov    %edi,%ebx$/;"	l
a9	rm.asm	/^  a9:	89 fb                	mov    %edi,%ebx$/;"	l
a9	sh.asm	/^      a9:	e8 6a 0e 00 00       	call   f18 <open>$/;"	l
a9	stressfs.asm	/^  a9:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a9	usertests.asm	/^      a9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a9	zombie.asm	/^  a9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a90	sh.asm	/^     a90:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a91	grep.asm	/^ a91:	75 07                	jne    a9a <malloc+0xce>$/;"	l
a91	ls.asm	/^ a91:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a93	grep.asm	/^ a93:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a93	sh.asm	/^     a93:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a93	usertests.asm	/^     a93:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a94	ls.asm	/^ a94:	ff 75 ec             	push   -0x14(%ebp)$/;"	l
a96	sh.asm	/^     a96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a97	ls.asm	/^ a97:	e8 e5 fe ff ff       	call   981 <morecore>$/;"	l
a97	usertests.asm	/^     a97:	0f 8e f4 00 00 00    	jle    b91 <pipe1+0x1d0>$/;"	l
a98	grep.asm	/^ a98:	eb 13                	jmp    aad <malloc+0xe1>$/;"	l
a9a	grep.asm	/^ a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9c	ls.asm	/^ a9c:	83 c4 10             	add    $0x10,%esp$/;"	l
a9d	grep.asm	/^ a9d:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a9d	sh.asm	/^     a9d:	83 ec 04             	sub    $0x4,%esp$/;"	l
a9d	usertests.asm	/^     a9d:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a9f	ls.asm	/^ a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aa	echo.asm	/^  aa:	0f b6 12             	movzbl (%edx),%edx$/;"	l
aa	grep.asm	/^  aa:	83 ec 04             	sub    $0x4,%esp$/;"	l
aa	ln.asm	/^  aa:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
aa	wc.asm	/^  aa:	0f 8f 72 ff ff ff    	jg     22 <wc+0x22>$/;"	l
aa0	grep.asm	/^ aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aa0	sh.asm	/^     aa0:	ff 75 0c             	push   0xc(%ebp)$/;"	l
aa0	usertests.asm	/^     aa0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aa2	ls.asm	/^ aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
aa3	grep.asm	/^ aa3:	8b 00                	mov    (%eax),%eax$/;"	l
aa3	sh.asm	/^     aa3:	ff 75 08             	push   0x8(%ebp)$/;"	l
aa3	usertests.asm	/^     aa3:	50                   	push   %eax$/;"	l
aa4	usertests.asm	/^     aa4:	e8 87 35 00 00       	call   4030 <close>$/;"	l
aa5	grep.asm	/^ aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aa6	ls.asm	/^ aa6:	75 07                	jne    aaf <malloc+0xce>$/;"	l
aa6	sh.asm	/^     aa6:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
aa8	grep.asm	/^ aa8:	e9 6d ff ff ff       	jmp    a1a <malloc+0x4e>$/;"	l
aa8	ls.asm	/^ aa8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aa9	sh.asm	/^     aa9:	e8 0e fe ff ff       	call   8bc <parseredirs>$/;"	l
aa9	usertests.asm	/^     aa9:	83 c4 10             	add    $0x10,%esp$/;"	l
aac	usertests.asm	/^     aac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
aad	grep.asm	/^ aad:	c9                   	leave  $/;"	l
aad	ls.asm	/^ aad:	eb 13                	jmp    ac2 <malloc+0xe1>$/;"	l
aae	grep.asm	/^ aae:	c3                   	ret    $/;"	l
aae	sh.asm	/^     aae:	83 c4 10             	add    $0x10,%esp$/;"	l
aaf	ls.asm	/^ aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab	forktest.asm	/^  ab:	e8 50 ff ff ff       	call   0 <printf>$/;"	l
ab	kill.asm	/^  ab:	89 45 0c             	mov    %eax,0xc(%ebp)$/;"	l
ab	mkdir.asm	/^  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
ab	rm.asm	/^  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
ab1	sh.asm	/^     ab1:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ab2	ls.asm	/^ ab2:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ab3	usertests.asm	/^     ab3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)$/;"	l
ab4	sh.asm	/^     ab4:	e9 87 00 00 00       	jmp    b40 <parseexec+0xee>$/;"	l
ab5	ls.asm	/^ ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab8	ls.asm	/^ ab8:	8b 00                	mov    (%eax),%eax$/;"	l
ab9	sh.asm	/^     ab9:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
aba	ls.asm	/^ aba:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aba	usertests.asm	/^     aba:	eb 66                	jmp    b22 <pipe1+0x161>$/;"	l
abc	sh.asm	/^     abc:	50                   	push   %eax$/;"	l
abc	usertests.asm	/^     abc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
abd	ls.asm	/^ abd:	e9 6d ff ff ff       	jmp    a2f <malloc+0x4e>$/;"	l
abd	sh.asm	/^     abd:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
ac	cat.asm	/^  ac:	eb 71                	jmp    11f <main+0xa5>$/;"	l
ac	init.asm	/^  ac:	68 83 08 00 00       	push   $0x883$/;"	l
ac	ls.asm	/^  ac:	b8 c8 0d 00 00       	mov    $0xdc8,%eax$/;"	l
ac	stressfs.asm	/^  ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ac	usertests.asm	/^      ac:	68 a6 45 00 00       	push   $0x45a6$/;"	l
ac	zombie.asm	/^  ac:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ac0	sh.asm	/^     ac0:	50                   	push   %eax$/;"	l
ac1	sh.asm	/^     ac1:	ff 75 0c             	push   0xc(%ebp)$/;"	l
ac2	ls.asm	/^ ac2:	c9                   	leave  $/;"	l
ac3	ls.asm	/^ ac3:	c3                   	ret    $/;"	l
ac3	usertests.asm	/^     ac3:	eb 3b                	jmp    b00 <pipe1+0x13f>$/;"	l
ac4	sh.asm	/^     ac4:	ff 75 08             	push   0x8(%ebp)$/;"	l
ac5	usertests.asm	/^     ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ac7	sh.asm	/^     ac7:	e8 81 fa ff ff       	call   54d <gettoken>$/;"	l
ac8	usertests.asm	/^     ac8:	05 c0 64 00 00       	add    $0x64c0,%eax$/;"	l
acc	sh.asm	/^     acc:	83 c4 10             	add    $0x10,%esp$/;"	l
acd	usertests.asm	/^     acd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
acf	sh.asm	/^     acf:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f	typeref:typename:void
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
ad	echo.asm	/^  ad:	88 10                	mov    %dl,(%eax)$/;"	l
ad	grep.asm	/^  ad:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
ad	ln.asm	/^  ad:	89 45 0c             	mov    %eax,0xc(%ebp)$/;"	l
ad0	usertests.asm	/^     ad0:	0f be c8             	movsbl %al,%ecx$/;"	l
ad2	sh.asm	/^     ad2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
ad3	usertests.asm	/^     ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ad6	sh.asm	/^     ad6:	0f 84 84 00 00 00    	je     b60 <parseexec+0x10e>$/;"	l
ad6	usertests.asm	/^     ad6:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ad9	usertests.asm	/^     ad9:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
adc	sh.asm	/^     adc:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)$/;"	l
adc	usertests.asm	/^     adc:	31 c8                	xor    %ecx,%eax$/;"	l
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	typeref:typename:uint *
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode	typeref:typename:uint[]
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode	typeref:typename:uint[]
ade	usertests.asm	/^     ade:	0f b6 c0             	movzbl %al,%eax$/;"	l
ae	cat.asm	/^  ae:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ae	kill.asm	/^  ae:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ae	mkdir.asm	/^  ae:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ae	rm.asm	/^  ae:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ae	sh.asm	/^      ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae0	sh.asm	/^     ae0:	74 10                	je     af2 <parseexec+0xa0>$/;"	l
ae1	usertests.asm	/^     ae1:	85 c0                	test   %eax,%eax$/;"	l
ae2	sh.asm	/^     ae2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ae3	usertests.asm	/^     ae3:	74 17                	je     afc <pipe1+0x13b>$/;"	l
ae5	sh.asm	/^     ae5:	68 7a 14 00 00       	push   $0x147a$/;"	l
ae5	usertests.asm	/^     ae5:	83 ec 08             	sub    $0x8,%esp$/;"	l
ae8	usertests.asm	/^     ae8:	68 c3 49 00 00       	push   $0x49c3$/;"	l
aea	sh.asm	/^     aea:	e8 ad f8 ff ff       	call   39c <panic>$/;"	l
aed	usertests.asm	/^     aed:	6a 01                	push   $0x1$/;"	l
aef	sh.asm	/^     aef:	83 c4 10             	add    $0x10,%esp$/;"	l
aef	usertests.asm	/^     aef:	e8 88 36 00 00       	call   417c <printf>$/;"	l
af	echo.asm	/^  af:	0f b6 00             	movzbl (%eax),%eax$/;"	l
af	zombie.asm	/^  af:	0f b6 d0             	movzbl %al,%edx$/;"	l
af2	sh.asm	/^     af2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx$/;"	l
af4	usertests.asm	/^     af4:	83 c4 10             	add    $0x10,%esp$/;"	l
af5	sh.asm	/^     af5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
af7	usertests.asm	/^     af7:	e9 ac 00 00 00       	jmp    ba8 <pipe1+0x1e7>$/;"	l
af8	sh.asm	/^     af8:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
afb	sh.asm	/^     afb:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)$/;"	l
afc	usertests.asm	/^     afc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
aff	sh.asm	/^     aff:	8b 55 e0             	mov    -0x20(%ebp),%edx$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr	typeref:typename:uint
allocproc	proc.c	/^allocproc(void)$/;"	f	typeref:struct:proc *	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	typeref:typename:uchar
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu	typeref:typename:uchar
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	typeref:typename:uchar
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	typeref:typename:int	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f	typeref:typename:int
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	usertests.c	/^void argptest()$/;"	f	typeref:typename:void
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f	typeref:typename:int
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	typeref:typename:uint:5
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f	typeref:typename:int
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v	typeref:typename:char * []
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f	typeref:typename:int
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	typeref:typename:uint:1
b	cat.asm	/^   b:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	stressfs.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	83 ec 08             	sub    $0x8,%esp$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	forktest.asm	/^  b0:	83 c4 10             	add    $0x10,%esp$/;"	l
b0	grep.asm	/^  b0:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
b0	ln.asm	/^  b0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b0	wc.asm	/^  b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
b00	usertests.asm	/^     b00:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b02	sh.asm	/^     b02:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b03	usertests.asm	/^     b03:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
b05	sh.asm	/^     b05:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b06	usertests.asm	/^     b06:	7c bd                	jl     ac5 <pipe1+0x104>$/;"	l
b08	sh.asm	/^     b08:	83 c1 08             	add    $0x8,%ecx$/;"	l
b08	usertests.asm	/^     b08:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b0b	sh.asm	/^     b0b:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)$/;"	l
b0b	usertests.asm	/^     b0b:	01 45 e4             	add    %eax,-0x1c(%ebp)$/;"	l
b0e	usertests.asm	/^     b0e:	d1 65 e8             	shll   -0x18(%ebp)$/;"	d
b0f	sh.asm	/^     b0f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
b1	cat.asm	/^  b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
b1	init.asm	/^  b1:	e8 da 02 00 00       	call   390 <exec>$/;"	l
b1	kill.asm	/^  b1:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
b1	ls.asm	/^  b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
b1	mkdir.asm	/^  b1:	90                   	nop$/;"	l
b1	rm.asm	/^  b1:	90                   	nop$/;"	l
b1	sh.asm	/^      b1:	85 c0                	test   %eax,%eax$/;"	l
b1	usertests.asm	/^      b1:	e8 c2 3f 00 00       	call   4078 <chdir>$/;"	l
b11	usertests.asm	/^     b11:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
b13	sh.asm	/^     b13:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
b14	usertests.asm	/^     b14:	3d 00 20 00 00       	cmp    $0x2000,%eax$/;"	l
b17	sh.asm	/^     b17:	7e 10                	jle    b29 <parseexec+0xd7>$/;"	l
b19	sh.asm	/^     b19:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b19	usertests.asm	/^     b19:	76 07                	jbe    b22 <pipe1+0x161>$/;"	l
b1b	usertests.asm	/^     b1b:	c7 45 e8 00 20 00 00 	movl   $0x2000,-0x18(%ebp)$/;"	l
b1c	sh.asm	/^     b1c:	68 c9 14 00 00       	push   $0x14c9$/;"	l
b2	echo.asm	/^  b2:	84 c0                	test   %al,%al$/;"	l
b2	mkdir.asm	/^  b2:	5b                   	pop    %ebx$/;"	l
b2	rm.asm	/^  b2:	5b                   	pop    %ebx$/;"	l
b2	zombie.asm	/^  b2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b21	sh.asm	/^     b21:	e8 76 f8 ff ff       	call   39c <panic>$/;"	l
b22	usertests.asm	/^     b22:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b25	usertests.asm	/^     b25:	83 ec 04             	sub    $0x4,%esp$/;"	l
b26	sh.asm	/^     b26:	83 c4 10             	add    $0x10,%esp$/;"	l
b28	usertests.asm	/^     b28:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
b29	sh.asm	/^     b29:	83 ec 04             	sub    $0x4,%esp$/;"	l
b2b	usertests.asm	/^     b2b:	68 c0 64 00 00       	push   $0x64c0$/;"	l
b2c	sh.asm	/^     b2c:	ff 75 0c             	push   0xc(%ebp)$/;"	l
b2f	sh.asm	/^     b2f:	ff 75 08             	push   0x8(%ebp)$/;"	l
b3	forktest.asm	/^  b3:	e8 a7 02 00 00       	call   35f <exit>$/;"	l
b3	grep.asm	/^  b3:	68 e0 0d 00 00       	push   $0xde0$/;"	l
b3	ln.asm	/^  b3:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
b3	mkdir.asm	/^  b3:	5f                   	pop    %edi$/;"	l
b3	rm.asm	/^  b3:	5f                   	pop    %edi$/;"	l
b3	sh.asm	/^      b3:	79 1e                	jns    d3 <runcmd+0xd3>$/;"	l
b3	stressfs.asm	/^  b3:	eb 1e                	jmp    d3 <main+0xd3>$/;"	l
b30	usertests.asm	/^     b30:	50                   	push   %eax$/;"	l
b31	usertests.asm	/^     b31:	e8 ea 34 00 00       	call   4020 <read>$/;"	l
b32	sh.asm	/^     b32:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
b35	sh.asm	/^     b35:	e8 82 fd ff ff       	call   8bc <parseredirs>$/;"	l
b36	usertests.asm	/^     b36:	83 c4 10             	add    $0x10,%esp$/;"	l
b39	usertests.asm	/^     b39:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b3a	sh.asm	/^     b3a:	83 c4 10             	add    $0x10,%esp$/;"	l
b3c	usertests.asm	/^     b3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b3d	sh.asm	/^     b3d:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b4	echo.asm	/^  b4:	75 e2                	jne    98 <strcpy+0xd>$/;"	l
b4	kill.asm	/^  b4:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
b4	ls.asm	/^  b4:	c9                   	leave  $/;"	l
b4	mkdir.asm	/^  b4:	5d                   	pop    %ebp$/;"	l
b4	rm.asm	/^  b4:	5d                   	pop    %ebp$/;"	l
b4	wc.asm	/^  b4:	79 17                	jns    cd <wc+0xcd>$/;"	l
b40	sh.asm	/^     b40:	83 ec 04             	sub    $0x4,%esp$/;"	l
b40	usertests.asm	/^     b40:	0f 8f 76 ff ff ff    	jg     abc <pipe1+0xfb>$/;"	l
b43	sh.asm	/^     b43:	68 d7 14 00 00       	push   $0x14d7$/;"	l
b46	usertests.asm	/^     b46:	81 7d e4 2d 14 00 00 	cmpl   $0x142d,-0x1c(%ebp)$/;"	l
b48	sh.asm	/^     b48:	ff 75 0c             	push   0xc(%ebp)$/;"	l
b4b	sh.asm	/^     b4b:	ff 75 08             	push   0x8(%ebp)$/;"	l
b4d	usertests.asm	/^     b4d:	74 1a                	je     b69 <pipe1+0x1a8>$/;"	l
b4e	sh.asm	/^     b4e:	e8 4a fb ff ff       	call   69d <peek>$/;"	l
b4f	usertests.asm	/^     b4f:	83 ec 04             	sub    $0x4,%esp$/;"	l
b5	ls.asm	/^  b5:	c3                   	ret    $/;"	l
b5	mkdir.asm	/^  b5:	c3                   	ret    $/;"	l
b5	rm.asm	/^  b5:	c3                   	ret    $/;"	l
b5	sh.asm	/^      b5:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
b5	stressfs.asm	/^  b5:	83 ec 04             	sub    $0x4,%esp$/;"	l
b5	zombie.asm	/^  b5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b52	usertests.asm	/^     b52:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
b53	sh.asm	/^     b53:	83 c4 10             	add    $0x10,%esp$/;"	l
b55	usertests.asm	/^     b55:	68 d1 49 00 00       	push   $0x49d1$/;"	l
b56	sh.asm	/^     b56:	85 c0                	test   %eax,%eax$/;"	l
b58	sh.asm	/^     b58:	0f 84 5b ff ff ff    	je     ab9 <parseexec+0x67>$/;"	l
b5a	usertests.asm	/^     b5a:	6a 01                	push   $0x1$/;"	l
b5c	usertests.asm	/^     b5c:	e8 1b 36 00 00       	call   417c <printf>$/;"	l
b5e	sh.asm	/^     b5e:	eb 01                	jmp    b61 <parseexec+0x10f>$/;"	l
b6	echo.asm	/^  b6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b6	init.asm	/^  b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b6	ln.asm	/^  b6:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
b6	ls.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	mkdir.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	rm.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	usertests.asm	/^      b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b6	wc.asm	/^  b6:	83 ec 08             	sub    $0x8,%esp$/;"	l
b60	sh.asm	/^     b60:	90                   	nop$/;"	l
b61	sh.asm	/^     b61:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b61	usertests.asm	/^     b61:	83 c4 10             	add    $0x10,%esp$/;"	l
b64	sh.asm	/^     b64:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b64	usertests.asm	/^     b64:	e8 9f 34 00 00       	call   4008 <exit>$/;"	l
b67	sh.asm	/^     b67:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
b69	usertests.asm	/^     b69:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b6c	usertests.asm	/^     b6c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b6e	sh.asm	/^     b6e:	00 $/;"	l
b6f	sh.asm	/^     b6f:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b6f	usertests.asm	/^     b6f:	50                   	push   %eax$/;"	l
b7	kill.asm	/^  b7:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b7	ls.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b7	mkdir.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b7	rm.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b70	usertests.asm	/^     b70:	e8 bb 34 00 00       	call   4030 <close>$/;"	l
b72	sh.asm	/^     b72:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b75	sh.asm	/^     b75:	83 c2 08             	add    $0x8,%edx$/;"	l
b75	usertests.asm	/^     b75:	83 c4 10             	add    $0x10,%esp$/;"	l
b78	sh.asm	/^     b78:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)$/;"	l
b78	usertests.asm	/^     b78:	e8 93 34 00 00       	call   4010 <wait>$/;"	l
b7d	usertests.asm	/^     b7d:	83 ec 08             	sub    $0x8,%esp$/;"	l
b7f	sh.asm	/^     b7f:	00 $/;"	l
b8	cat.asm	/^  b8:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b8	forktest.asm	/^  b8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b8	grep.asm	/^  b8:	e8 82 04 00 00       	call   53f <memmove>$/;"	l
b8	sh.asm	/^      b8:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
b8	stressfs.asm	/^  b8:	68 00 02 00 00       	push   $0x200$/;"	l
b8	zombie.asm	/^  b8:	0f b6 c8             	movzbl %al,%ecx$/;"	l
b80	sh.asm	/^     b80:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b80	usertests.asm	/^     b80:	68 f7 49 00 00       	push   $0x49f7$/;"	l
b83	sh.asm	/^     b83:	c9                   	leave  $/;"	l
b84	sh.asm	/^     b84:	c3                   	ret    $/;"	l
b85	sh.asm	/^     b85:	55                   	push   %ebp$/;"	l
b85	usertests.asm	/^     b85:	6a 01                	push   $0x1$/;"	l
b86	sh.asm	/^     b86:	89 e5                	mov    %esp,%ebp$/;"	l
b87	usertests.asm	/^     b87:	e8 f0 35 00 00       	call   417c <printf>$/;"	l
b88	sh.asm	/^     b88:	83 ec 28             	sub    $0x28,%esp$/;"	l
b8b	sh.asm	/^     b8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
b8c	usertests.asm	/^     b8c:	83 c4 10             	add    $0x10,%esp$/;"	l
b8f	sh.asm	/^     b8f:	75 0a                	jne    b9b <nulterminate+0x16>$/;"	l
b8f	usertests.asm	/^     b8f:	eb 17                	jmp    ba8 <pipe1+0x1e7>$/;"	l
b9	echo.asm	/^  b9:	c9                   	leave  $/;"	l
b9	init.asm	/^  b9:	83 ec 08             	sub    $0x8,%esp$/;"	l
b9	ln.asm	/^  b9:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b9	ls.asm	/^  b9:	57                   	push   %edi$/;"	l
b9	mkdir.asm	/^  b9:	83 ec 10             	sub    $0x10,%esp$/;"	l
b9	rm.asm	/^  b9:	83 ec 10             	sub    $0x10,%esp$/;"	l
b9	usertests.asm	/^      b9:	85 c0                	test   %eax,%eax$/;"	l
b9	wc.asm	/^  b9:	68 45 09 00 00       	push   $0x945$/;"	l
b91	sh.asm	/^     b91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b91	usertests.asm	/^     b91:	83 ec 08             	sub    $0x8,%esp$/;"	l
b94	usertests.asm	/^     b94:	68 e8 49 00 00       	push   $0x49e8$/;"	l
b96	sh.asm	/^     b96:	e9 e4 00 00 00       	jmp    c7f <nulterminate+0xfa>$/;"	l
b99	usertests.asm	/^     b99:	6a 01                	push   $0x1$/;"	l
b9b	sh.asm	/^     b9b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b9b	usertests.asm	/^     b9b:	e8 dc 35 00 00       	call   417c <printf>$/;"	l
b9e	sh.asm	/^     b9e:	8b 00                	mov    (%eax),%eax$/;"	l
ba	echo.asm	/^  ba:	c3                   	ret    $/;"	l
ba	kill.asm	/^  ba:	88 10                	mov    %dl,(%eax)$/;"	l
ba	ls.asm	/^  ba:	56                   	push   %esi$/;"	l
ba0	sh.asm	/^     ba0:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ba0	usertests.asm	/^     ba0:	83 c4 10             	add    $0x10,%esp$/;"	l
ba3	sh.asm	/^     ba3:	0f 87 d3 00 00 00    	ja     c7c <nulterminate+0xf7>$/;"	l
ba3	usertests.asm	/^     ba3:	e8 60 34 00 00       	call   4008 <exit>$/;"	l
ba8	usertests.asm	/^     ba8:	c9                   	leave  $/;"	l
ba9	sh.asm	/^     ba9:	8b 04 85 dc 14 00 00 	mov    0x14dc(,%eax,4),%eax$/;"	l
ba9	usertests.asm	/^     ba9:	c3                   	ret    $/;"	l
baa	usertests.asm	/^     baa:	55                   	push   %ebp$/;"	l
bab	usertests.asm	/^     bab:	89 e5                	mov    %esp,%ebp$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	typeref:struct:cmd *
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	usertests.asm	/^     bad:	83 ec 28             	sub    $0x28,%esp$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	typeref:typename:uint	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f	typeref:typename:void
base	umalloc.c	/^static Header base;$/;"	v	typeref:typename:Header	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:16
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
bb	cat.asm	/^  bb:	01 d0                	add    %edx,%eax$/;"	l
bb	echo.asm	/^  bb:	55                   	push   %ebp$/;"	l
bb	ls.asm	/^  bb:	53                   	push   %ebx$/;"	l
bb	sh.asm	/^      bb:	83 ec 04             	sub    $0x4,%esp$/;"	l
bb	usertests.asm	/^      bb:	79 1b                	jns    d8 <iputtest+0xd8>$/;"	l
bb	zombie.asm	/^  bb:	89 d0                	mov    %edx,%eax$/;"	l
bb0	sh.asm	/^     bb0:	ff e0                	jmp    *%eax$/;"	l
bb0	usertests.asm	/^     bb0:	83 ec 08             	sub    $0x8,%esp$/;"	l
bb2	sh.asm	/^     bb2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bb3	usertests.asm	/^     bb3:	68 01 4a 00 00       	push   $0x4a01$/;"	l
bb5	sh.asm	/^     bb5:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
bb8	sh.asm	/^     bb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
bb8	usertests.asm	/^     bb8:	6a 01                	push   $0x1$/;"	l
bba	usertests.asm	/^     bba:	e8 bd 35 00 00       	call   417c <printf>$/;"	l
bbf	sh.asm	/^     bbf:	eb 14                	jmp    bd5 <nulterminate+0x50>$/;"	l
bbf	usertests.asm	/^     bbf:	83 c4 10             	add    $0x10,%esp$/;"	l
bc	echo.asm	/^  bc:	89 e5                	mov    %esp,%ebp$/;"	l
bc	forktest.asm	/^  bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bc	init.asm	/^  bc:	68 b4 08 00 00       	push   $0x8b4$/;"	l
bc	kill.asm	/^  bc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bc	ln.asm	/^  bc:	88 10                	mov    %dl,(%eax)$/;"	l
bc	ls.asm	/^  bc:	81 ec 3c 02 00 00    	sub    $0x23c,%esp$/;"	l
bc	mkdir.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc	rm.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc1	sh.asm	/^     bc1:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
bc2	usertests.asm	/^     bc2:	e8 39 34 00 00       	call   4000 <fork>$/;"	l
bc4	sh.asm	/^     bc4:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bc7	sh.asm	/^     bc7:	83 c2 08             	add    $0x8,%edx$/;"	l
bc7	usertests.asm	/^     bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
bca	sh.asm	/^     bca:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax$/;"	l
bca	usertests.asm	/^     bca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon0f27d3d00108
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bce	sh.asm	/^     bce:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
bce	usertests.asm	/^     bce:	75 02                	jne    bd2 <preempt+0x28>$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	cat.asm	/^  bd:	8b 00                	mov    (%eax),%eax$/;"	l
bd	grep.asm	/^  bd:	83 c4 10             	add    $0x10,%esp$/;"	l
bd	stressfs.asm	/^  bd:	8d 85 e6 fd ff ff    	lea    -0x21a(%ebp),%eax$/;"	l
bd	usertests.asm	/^      bd:	a1 8c 64 00 00       	mov    0x648c,%eax$/;"	l
bd	zombie.asm	/^  bd:	29 c8                	sub    %ecx,%eax$/;"	l
bd0	usertests.asm	/^     bd0:	eb fe                	jmp    bd0 <preempt+0x26>$/;"	l
bd1	sh.asm	/^     bd1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
bd2	usertests.asm	/^     bd2:	e8 29 34 00 00       	call   4000 <fork>$/;"	l
bd5	sh.asm	/^     bd5:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
bd7	usertests.asm	/^     bd7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bd8	sh.asm	/^     bd8:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	usertests.asm	/^     bda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
bdb	sh.asm	/^     bdb:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax$/;"	l
bde	usertests.asm	/^     bde:	75 02                	jne    be2 <preempt+0x38>$/;"	l
bdf	sh.asm	/^     bdf:	85 c0                	test   %eax,%eax$/;"	l
be	echo.asm	/^  be:	eb 08                	jmp    c8 <strcmp+0xd>$/;"	l
be	ln.asm	/^  be:	0f b6 00             	movzbl (%eax),%eax$/;"	l
be	sh.asm	/^      be:	50                   	push   %eax$/;"	l
be	wc.asm	/^  be:	6a 01                	push   $0x1$/;"	l
be0	usertests.asm	/^     be0:	eb fe                	jmp    be0 <preempt+0x36>$/;"	l
be1	sh.asm	/^     be1:	75 de                	jne    bc1 <nulterminate+0x3c>$/;"	l
be2	usertests.asm	/^     be2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
be3	sh.asm	/^     be3:	e9 94 00 00 00       	jmp    c7c <nulterminate+0xf7>$/;"	l
be5	usertests.asm	/^     be5:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
be8	sh.asm	/^     be8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be8	usertests.asm	/^     be8:	50                   	push   %eax$/;"	l
be9	usertests.asm	/^     be9:	e8 2a 34 00 00       	call   4018 <pipe>$/;"	l
beb	sh.asm	/^     beb:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
bee	sh.asm	/^     bee:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bee	usertests.asm	/^     bee:	83 c4 10             	add    $0x10,%esp$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f	typeref:typename:void
bf	cat.asm	/^  bf:	83 ec 08             	sub    $0x8,%esp$/;"	l
bf	kill.asm	/^  bf:	84 c0                	test   %al,%al$/;"	l
bf	mkdir.asm	/^  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bf	rm.asm	/^  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bf	sh.asm	/^      bf:	68 1b 14 00 00       	push   $0x141b$/;"	l
bf	zombie.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf1	sh.asm	/^     bf1:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
bf1	usertests.asm	/^     bf1:	e8 0a 34 00 00       	call   4000 <fork>$/;"	l
bf4	sh.asm	/^     bf4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bf6	usertests.asm	/^     bf6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
bf7	sh.asm	/^     bf7:	50                   	push   %eax$/;"	l
bf8	sh.asm	/^     bf8:	e8 88 ff ff ff       	call   b85 <nulterminate>$/;"	l
bf9	usertests.asm	/^     bf9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bfd	sh.asm	/^     bfd:	83 c4 10             	add    $0x10,%esp$/;"	l
bfd	usertests.asm	/^     bfd:	75 4d                	jne    c4c <preempt+0xa2>$/;"	l
bff	usertests.asm	/^     bff:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	typeref:typename:void	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	typeref:struct:buf *	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f	typeref:typename:void
bigdir	usertests.c	/^bigdir(void)$/;"	f	typeref:typename:void
bigfile	usertests.c	/^bigfile(void)$/;"	f	typeref:typename:void
bigwrite	usertests.c	/^bigwrite(void)$/;"	f	typeref:typename:void
binit	bio.c	/^binit(void)$/;"	f	typeref:typename:void
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	typeref:typename:int[]	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf	typeref:typename:uint
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	typeref:typename:uint	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock	typeref:typename:uint
bochs	Makefile	/^bochs : fs.img xv6.img$/;"	t
bootblock	Makefile	/^bootblock: bootasm.S bootmain.c$/;"	t
bootmain	bootmain.c	/^bootmain(void)$/;"	f	typeref:typename:void
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f	typeref:struct:buf *
brelse	bio.c	/^brelse(struct buf *b)$/;"	f	typeref:typename:void
bsstest	usertests.c	/^bsstest(void)$/;"	f	typeref:typename:void
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf[]	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon96a473a90208	typeref:typename:char[]	file:
buf	grep.c	/^char buf[1024];$/;"	v	typeref:typename:char[1024]
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v	typeref:typename:char[8192]
buf	wc.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f	typeref:typename:void
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	typeref:typename:void	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 8c 01 00 00       	call   19d <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	e8 c7 0e 00 00       	call   ed8 <exit>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	echo.asm	/^  c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c0	forktest.asm	/^  c0:	7f d6                	jg     98 <forktest+0x6f>$/;"	l
c0	grep.asm	/^  c0:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c0	wc.asm	/^  c0:	e8 c3 04 00 00       	call   588 <printf>$/;"	l
c0	zombie.asm	/^  c0:	c3                   	ret    $/;"	l
c00	sh.asm	/^     c00:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c02	usertests.asm	/^     c02:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c03	sh.asm	/^     c03:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
c05	usertests.asm	/^     c05:	50                   	push   %eax$/;"	l
c06	sh.asm	/^     c06:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c06	usertests.asm	/^     c06:	e8 25 34 00 00       	call   4030 <close>$/;"	l
c09	sh.asm	/^     c09:	eb 71                	jmp    c7c <nulterminate+0xf7>$/;"	l
c0b	sh.asm	/^     c0b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0b	usertests.asm	/^     c0b:	83 c4 10             	add    $0x10,%esp$/;"	l
c0e	sh.asm	/^     c0e:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c0e	usertests.asm	/^     c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c1	init.asm	/^  c1:	6a 01                	push   $0x1$/;"	l
c1	kill.asm	/^  c1:	75 e2                	jne    a5 <strcpy+0xd>$/;"	l
c1	ln.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	zombie.asm	/^  c1:	55                   	push   %ebp$/;"	l
c11	sh.asm	/^     c11:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c11	usertests.asm	/^     c11:	83 ec 04             	sub    $0x4,%esp$/;"	l
c14	sh.asm	/^     c14:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c14	usertests.asm	/^     c14:	6a 01                	push   $0x1$/;"	l
c16	usertests.asm	/^     c16:	68 0b 4a 00 00       	push   $0x4a0b$/;"	l
c17	sh.asm	/^     c17:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c1a	sh.asm	/^     c1a:	50                   	push   %eax$/;"	l
c1b	sh.asm	/^     c1b:	e8 65 ff ff ff       	call   b85 <nulterminate>$/;"	l
c1b	usertests.asm	/^     c1b:	50                   	push   %eax$/;"	l
c1c	usertests.asm	/^     c1c:	e8 07 34 00 00       	call   4028 <write>$/;"	l
c2	cat.asm	/^  c2:	6a 00                	push   $0x0$/;"	l
c2	forktest.asm	/^  c2:	e8 a0 02 00 00       	call   367 <wait>$/;"	l
c2	ls.asm	/^  c2:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2	mkdir.asm	/^  c2:	90                   	nop$/;"	l
c2	rm.asm	/^  c2:	90                   	nop$/;"	l
c2	usertests.asm	/^      c2:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2	zombie.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c20	sh.asm	/^     c20:	83 c4 10             	add    $0x10,%esp$/;"	l
c21	usertests.asm	/^     c21:	83 c4 10             	add    $0x10,%esp$/;"	l
c23	sh.asm	/^     c23:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c24	usertests.asm	/^     c24:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c26	sh.asm	/^     c26:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c27	usertests.asm	/^     c27:	74 12                	je     c3b <preempt+0x91>$/;"	l
c29	sh.asm	/^     c29:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c29	usertests.asm	/^     c29:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2c	sh.asm	/^     c2c:	50                   	push   %eax$/;"	l
c2c	usertests.asm	/^     c2c:	68 0d 4a 00 00       	push   $0x4a0d$/;"	l
c2d	sh.asm	/^     c2d:	e8 53 ff ff ff       	call   b85 <nulterminate>$/;"	l
c3	grep.asm	/^  c3:	b8 ff 03 00 00       	mov    $0x3ff,%eax$/;"	l
c3	init.asm	/^  c3:	e8 04 04 00 00       	call   4cc <printf>$/;"	l
c3	kill.asm	/^  c3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c3	ln.asm	/^  c3:	75 e2                	jne    a7 <strcpy+0xd>$/;"	l
c3	mkdir.asm	/^  c3:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
c3	rm.asm	/^  c3:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
c3	stressfs.asm	/^  c3:	50                   	push   %eax$/;"	l
c31	usertests.asm	/^     c31:	6a 01                	push   $0x1$/;"	l
c32	sh.asm	/^     c32:	83 c4 10             	add    $0x10,%esp$/;"	l
c33	usertests.asm	/^     c33:	e8 44 35 00 00       	call   417c <printf>$/;"	l
c35	sh.asm	/^     c35:	eb 45                	jmp    c7c <nulterminate+0xf7>$/;"	l
c37	sh.asm	/^     c37:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c38	usertests.asm	/^     c38:	83 c4 10             	add    $0x10,%esp$/;"	l
c3a	sh.asm	/^     c3a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c3b	usertests.asm	/^     c3b:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c3d	sh.asm	/^     c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c3e	usertests.asm	/^     c3e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c4	cat.asm	/^  c4:	50                   	push   %eax$/;"	l
c4	echo.asm	/^  c4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
c4	sh.asm	/^      c4:	6a 02                	push   $0x2$/;"	l
c4	stressfs.asm	/^  c4:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
c4	zombie.asm	/^  c4:	83 ec 10             	sub    $0x10,%esp$/;"	l
c40	sh.asm	/^     c40:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c41	usertests.asm	/^     c41:	50                   	push   %eax$/;"	l
c42	usertests.asm	/^     c42:	e8 e9 33 00 00       	call   4030 <close>$/;"	l
c43	sh.asm	/^     c43:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c46	sh.asm	/^     c46:	50                   	push   %eax$/;"	l
c47	sh.asm	/^     c47:	e8 39 ff ff ff       	call   b85 <nulterminate>$/;"	l
c47	usertests.asm	/^     c47:	83 c4 10             	add    $0x10,%esp$/;"	l
c4a	usertests.asm	/^     c4a:	eb fe                	jmp    c4a <preempt+0xa0>$/;"	l
c4c	sh.asm	/^     c4c:	83 c4 10             	add    $0x10,%esp$/;"	l
c4c	usertests.asm	/^     c4c:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c4f	sh.asm	/^     c4f:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c4f	usertests.asm	/^     c4f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c5	cat.asm	/^  c5:	e8 f8 02 00 00       	call   3c2 <open>$/;"	l
c5	ln.asm	/^  c5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c5	ls.asm	/^  c5:	6a 00                	push   $0x0$/;"	l
c5	usertests.asm	/^      c5:	68 a8 45 00 00       	push   $0x45a8$/;"	l
c5	wc.asm	/^  c5:	83 c4 10             	add    $0x10,%esp$/;"	l
c52	sh.asm	/^     c52:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c52	usertests.asm	/^     c52:	50                   	push   %eax$/;"	l
c53	usertests.asm	/^     c53:	e8 d8 33 00 00       	call   4030 <close>$/;"	l
c55	sh.asm	/^     c55:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c58	sh.asm	/^     c58:	50                   	push   %eax$/;"	l
c58	usertests.asm	/^     c58:	83 c4 10             	add    $0x10,%esp$/;"	l
c59	sh.asm	/^     c59:	e8 27 ff ff ff       	call   b85 <nulterminate>$/;"	l
c5b	usertests.asm	/^     c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c5e	sh.asm	/^     c5e:	83 c4 10             	add    $0x10,%esp$/;"	l
c5e	usertests.asm	/^     c5e:	83 ec 04             	sub    $0x4,%esp$/;"	l
c6	kill.asm	/^  c6:	c9                   	leave  $/;"	l
c6	mkdir.asm	/^  c6:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
c6	rm.asm	/^  c6:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
c6	sh.asm	/^      c6:	e8 81 0f 00 00       	call   104c <printf>$/;"	l
c61	sh.asm	/^     c61:	eb 19                	jmp    c7c <nulterminate+0xf7>$/;"	l
c61	usertests.asm	/^     c61:	68 00 20 00 00       	push   $0x2000$/;"	l
c63	sh.asm	/^     c63:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c66	sh.asm	/^     c66:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c66	usertests.asm	/^     c66:	68 c0 64 00 00       	push   $0x64c0$/;"	l
c69	sh.asm	/^     c69:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c6b	usertests.asm	/^     c6b:	50                   	push   %eax$/;"	l
c6c	sh.asm	/^     c6c:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c6c	usertests.asm	/^     c6c:	e8 af 33 00 00       	call   4020 <read>$/;"	l
c6f	sh.asm	/^     c6f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c7	forktest.asm	/^  c7:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
c7	kill.asm	/^  c7:	c3                   	ret    $/;"	l
c7	ls.asm	/^  c7:	ff 75 08             	push   0x8(%ebp)$/;"	l
c7	stressfs.asm	/^  c7:	e8 fd 02 00 00       	call   3c9 <write>$/;"	l
c7	zombie.asm	/^  c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
c71	usertests.asm	/^     c71:	83 c4 10             	add    $0x10,%esp$/;"	l
c72	sh.asm	/^     c72:	50                   	push   %eax$/;"	l
c73	sh.asm	/^     c73:	e8 0d ff ff ff       	call   b85 <nulterminate>$/;"	l
c74	usertests.asm	/^     c74:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c77	usertests.asm	/^     c77:	74 14                	je     c8d <preempt+0xe3>$/;"	l
c78	sh.asm	/^     c78:	83 c4 10             	add    $0x10,%esp$/;"	l
c79	usertests.asm	/^     c79:	83 ec 08             	sub    $0x8,%esp$/;"	l
c7b	sh.asm	/^     c7b:	90                   	nop$/;"	l
c7c	sh.asm	/^     c7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c7c	usertests.asm	/^     c7c:	68 21 4a 00 00       	push   $0x4a21$/;"	l
c7f	sh.asm	/^     c7f:	c9                   	leave  $/;"	l
c8	echo.asm	/^  c8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c8	grep.asm	/^  c8:	29 d0                	sub    %edx,%eax$/;"	l
c8	init.asm	/^  c8:	83 c4 10             	add    $0x10,%esp$/;"	l
c8	kill.asm	/^  c8:	55                   	push   %ebp$/;"	l
c8	ln.asm	/^  c8:	c9                   	leave  $/;"	l
c8	wc.asm	/^  c8:	e8 47 03 00 00       	call   414 <exit>$/;"	l
c80	sh.asm	/^     c80:	c3                   	ret    $/;"	l
c81	sh.asm	/^     c81:	55                   	push   %ebp$/;"	l
c81	usertests.asm	/^     c81:	6a 01                	push   $0x1$/;"	l
c82	sh.asm	/^     c82:	89 e5                	mov    %esp,%ebp$/;"	l
c83	usertests.asm	/^     c83:	e8 f4 34 00 00       	call   417c <printf>$/;"	l
c84	sh.asm	/^     c84:	57                   	push   %edi$/;"	l
c85	sh.asm	/^     c85:	53                   	push   %ebx$/;"	l
c86	sh.asm	/^     c86:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c88	usertests.asm	/^     c88:	83 c4 10             	add    $0x10,%esp$/;"	l
c89	sh.asm	/^     c89:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
c8b	usertests.asm	/^     c8b:	eb 7e                	jmp    d0b <preempt+0x161>$/;"	l
c8c	sh.asm	/^     c8c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c8d	usertests.asm	/^     c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c8f	sh.asm	/^     c8f:	89 cb                	mov    %ecx,%ebx$/;"	l
c9	kill.asm	/^  c9:	89 e5                	mov    %esp,%ebp$/;"	l
c9	ln.asm	/^  c9:	c3                   	ret    $/;"	l
c9	mkdir.asm	/^  c9:	89 45 0c             	mov    %eax,0xc(%ebp)$/;"	l
c9	rm.asm	/^  c9:	89 45 0c             	mov    %eax,0xc(%ebp)$/;"	l
c90	usertests.asm	/^     c90:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c91	sh.asm	/^     c91:	89 df                	mov    %ebx,%edi$/;"	l
c93	sh.asm	/^     c93:	89 d1                	mov    %edx,%ecx$/;"	l
c93	usertests.asm	/^     c93:	50                   	push   %eax$/;"	l
c94	usertests.asm	/^     c94:	e8 97 33 00 00       	call   4030 <close>$/;"	l
c95	sh.asm	/^     c95:	fc                   	cld    $/;"	l
c96	sh.asm	/^     c96:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
c98	sh.asm	/^     c98:	89 ca                	mov    %ecx,%edx$/;"	l
c99	usertests.asm	/^     c99:	83 c4 10             	add    $0x10,%esp$/;"	l
c9a	sh.asm	/^     c9a:	89 fb                	mov    %edi,%ebx$/;"	l
c9c	sh.asm	/^     c9c:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
c9c	usertests.asm	/^     c9c:	83 ec 08             	sub    $0x8,%esp$/;"	l
c9f	sh.asm	/^     c9f:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
c9f	usertests.asm	/^     c9f:	68 34 4a 00 00       	push   $0x4a34$/;"	l
ca	cat.asm	/^  ca:	83 c4 10             	add    $0x10,%esp$/;"	l
ca	forktest.asm	/^  ca:	74 17                	je     e3 <forktest+0xba>$/;"	l
ca	grep.asm	/^  ca:	89 c2                	mov    %eax,%edx$/;"	l
ca	ln.asm	/^  ca:	55                   	push   %ebp$/;"	l
ca	ls.asm	/^  ca:	e8 0a 05 00 00       	call   5d9 <open>$/;"	l
ca	usertests.asm	/^      ca:	50                   	push   %eax$/;"	l
ca2	sh.asm	/^     ca2:	90                   	nop$/;"	l
ca3	sh.asm	/^     ca3:	5b                   	pop    %ebx$/;"	l
ca4	sh.asm	/^     ca4:	5f                   	pop    %edi$/;"	l
ca4	usertests.asm	/^     ca4:	6a 01                	push   $0x1$/;"	l
ca5	sh.asm	/^     ca5:	5d                   	pop    %ebp$/;"	l
ca6	sh.asm	/^     ca6:	c3                   	ret    $/;"	l
ca6	usertests.asm	/^     ca6:	e8 d1 34 00 00       	call   417c <printf>$/;"	l
ca7	sh.asm	/^     ca7:	55                   	push   %ebp$/;"	l
ca8	sh.asm	/^     ca8:	89 e5                	mov    %esp,%ebp$/;"	l
caa	sh.asm	/^     caa:	83 ec 10             	sub    $0x10,%esp$/;"	l
cab	usertests.asm	/^     cab:	83 c4 10             	add    $0x10,%esp$/;"	l
cad	sh.asm	/^     cad:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cae	usertests.asm	/^     cae:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f	typeref:typename:void
cb	echo.asm	/^  cb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cb	init.asm	/^  cb:	e8 88 02 00 00       	call   358 <exit>$/;"	l
cb	kill.asm	/^  cb:	eb 08                	jmp    d5 <strcmp+0xd>$/;"	l
cb	ln.asm	/^  cb:	89 e5                	mov    %esp,%ebp$/;"	l
cb	sh.asm	/^      cb:	83 c4 10             	add    $0x10,%esp$/;"	l
cb	usertests.asm	/^      cb:	e8 ac 40 00 00       	call   417c <printf>$/;"	l
cb0	sh.asm	/^     cb0:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
cb1	usertests.asm	/^     cb1:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
cb3	sh.asm	/^     cb3:	90                   	nop$/;"	l
cb4	sh.asm	/^     cb4:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cb4	usertests.asm	/^     cb4:	e8 7f 33 00 00       	call   4038 <kill>$/;"	l
cb7	sh.asm	/^     cb7:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
cb9	usertests.asm	/^     cb9:	83 c4 10             	add    $0x10,%esp$/;"	l
cba	sh.asm	/^     cba:	89 45 0c             	mov    %eax,0xc(%ebp)$/;"	l
cbc	usertests.asm	/^     cbc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cbd	sh.asm	/^     cbd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cbf	usertests.asm	/^     cbf:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	83 ec 08             	sub    $0x8,%esp$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^  cc:	83 c4 10             	add    $0x10,%esp$/;"	l
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	sh.asm	/^     cc0:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
cc2	usertests.asm	/^     cc2:	e8 71 33 00 00       	call   4038 <kill>$/;"	l
cc3	sh.asm	/^     cc3:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
cc6	sh.asm	/^     cc6:	0f b6 12             	movzbl (%edx),%edx$/;"	l
cc7	usertests.asm	/^     cc7:	83 c4 10             	add    $0x10,%esp$/;"	l
cc9	sh.asm	/^     cc9:	88 10                	mov    %dl,(%eax)$/;"	l
cca	usertests.asm	/^     cca:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ccb	sh.asm	/^     ccb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ccd	usertests.asm	/^     ccd:	ff 75 ec             	push   -0x14(%ebp)$/;"	l
cce	sh.asm	/^     cce:	84 c0                	test   %al,%al$/;"	l
cd	cat.asm	/^  cd:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
cd	kill.asm	/^  cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cd	ln.asm	/^  cd:	eb 08                	jmp    d7 <strcmp+0xd>$/;"	l
cd	wc.asm	/^  cd:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd0	sh.asm	/^     cd0:	75 e2                	jne    cb4 <strcpy+0xd>$/;"	l
cd0	usertests.asm	/^     cd0:	e8 63 33 00 00       	call   4038 <kill>$/;"	l
cd2	sh.asm	/^     cd2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cd5	sh.asm	/^     cd5:	c9                   	leave  $/;"	l
cd5	usertests.asm	/^     cd5:	83 c4 10             	add    $0x10,%esp$/;"	l
cd6	sh.asm	/^     cd6:	c3                   	ret    $/;"	l
cd7	sh.asm	/^     cd7:	55                   	push   %ebp$/;"	l
cd8	sh.asm	/^     cd8:	89 e5                	mov    %esp,%ebp$/;"	l
cd8	usertests.asm	/^     cd8:	83 ec 08             	sub    $0x8,%esp$/;"	l
cda	sh.asm	/^     cda:	eb 08                	jmp    ce4 <strcmp+0xd>$/;"	l
cdb	usertests.asm	/^     cdb:	68 3d 4a 00 00       	push   $0x4a3d$/;"	l
cdc	sh.asm	/^     cdc:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
ce	echo.asm	/^  ce:	84 c0                	test   %al,%al$/;"	l
ce	sh.asm	/^      ce:	e8 05 0e 00 00       	call   ed8 <exit>$/;"	l
ce	zombie.asm	/^  ce:	eb 04                	jmp    d4 <strlen+0x13>$/;"	l
ce0	sh.asm	/^     ce0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ce0	usertests.asm	/^     ce0:	6a 01                	push   $0x1$/;"	l
ce2	usertests.asm	/^     ce2:	e8 95 34 00 00       	call   417c <printf>$/;"	l
ce4	sh.asm	/^     ce4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce7	sh.asm	/^     ce7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ce7	usertests.asm	/^     ce7:	83 c4 10             	add    $0x10,%esp$/;"	l
cea	sh.asm	/^     cea:	84 c0                	test   %al,%al$/;"	l
cea	usertests.asm	/^     cea:	e8 21 33 00 00       	call   4010 <wait>$/;"	l
cec	sh.asm	/^     cec:	74 10                	je     cfe <strcmp+0x27>$/;"	l
cee	sh.asm	/^     cee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cef	usertests.asm	/^     cef:	e8 1c 33 00 00       	call   4010 <wait>$/;"	l
cf	forktest.asm	/^  cf:	68 3f 04 00 00       	push   $0x43f$/;"	l
cf	grep.asm	/^  cf:	05 e0 0d 00 00       	add    $0xde0,%eax$/;"	l
cf	ln.asm	/^  cf:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cf	ls.asm	/^  cf:	83 c4 10             	add    $0x10,%esp$/;"	l
cf	mkdir.asm	/^  cf:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
cf	rm.asm	/^  cf:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
cf	stressfs.asm	/^  cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
cf1	sh.asm	/^     cf1:	0f b6 10             	movzbl (%eax),%edx$/;"	l
cf4	sh.asm	/^     cf4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
cf4	usertests.asm	/^     cf4:	e8 17 33 00 00       	call   4010 <wait>$/;"	l
cf7	sh.asm	/^     cf7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cf9	usertests.asm	/^     cf9:	83 ec 08             	sub    $0x8,%esp$/;"	l
cfa	sh.asm	/^     cfa:	38 c2                	cmp    %al,%dl$/;"	l
cfc	sh.asm	/^     cfc:	74 de                	je     cdc <strcmp+0x5>$/;"	l
cfc	usertests.asm	/^     cfc:	68 46 4a 00 00       	push   $0x4a46$/;"	l
cfe	sh.asm	/^     cfe:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	typeref:typename:void	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	typeref:typename:void *
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	typeref:typename:uchar
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	typeref:typename:uchar
clean	Makefile	/^clean: $/;"	t
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:void
cli	x86.h	/^cli(void)$/;"	f	typeref:typename:void
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:cmd *	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:cmd *	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	typeref:typename:uint	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f	typeref:typename:void
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	typeref:typename:void	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	typeref:typename:int	file:
concreate	usertests.c	/^concreate(void)$/;"	f	typeref:typename:void
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon96a473a90108
consoleinit	console.c	/^consoleinit(void)$/;"	f	typeref:typename:void
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f	typeref:typename:void
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f	typeref:typename:int
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f	typeref:typename:int
consputc	console.c	/^consputc(int c)$/;"	f	typeref:typename:void
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:context *
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f	typeref:typename:int
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f	typeref:typename:pde_t *
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f	typeref:typename:void
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:cpu *
cpuid	proc.c	/^cpuid() {$/;"	f	typeref:typename:int
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu[]
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	typeref:typename:void *
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	typeref:struct:inode *	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f	typeref:typename:void
createtest	usertests.c	/^createtest(void)$/;"	f	typeref:typename:void
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	typeref:typename:ushort *	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc	typeref:typename:uint:16
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	typeref:typename:ushort
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	typeref:typename:ushort
ctags	Makefile	/^ctags: $(OBJS) entryother.S _init$/;"	t
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v	typeref:typename:uchar[256]
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:inode *
d	echo.asm	/^   d:	53                   	push   %ebx$/;"	l
d	grep.asm	/^   d:	e9 ae 00 00 00       	jmp    c0 <grep+0xc0>$/;"	l
d	init.asm	/^   d:	51                   	push   %ecx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ln.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ls.asm	/^   d:	e8 c5 03 00 00       	call   3d7 <strlen>$/;"	l
d	mkdir.asm	/^   d:	53                   	push   %ebx$/;"	l
d	rm.asm	/^   d:	53                   	push   %ebx$/;"	l
d	stressfs.asm	/^   d:	51                   	push   %ecx$/;"	l
d	wc.asm	/^   d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	cat.asm	/^  d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d0	echo.asm	/^  d0:	74 10                	je     e2 <strcmp+0x27>$/;"	l
d0	init.asm	/^  d0:	83 ec 08             	sub    $0x8,%esp$/;"	l
d0	usertests.asm	/^      d0:	83 c4 10             	add    $0x10,%esp$/;"	l
d0	wc.asm	/^  d0:	ff 75 0c             	push   0xc(%ebp)$/;"	l
d0	zombie.asm	/^  d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
d01	sh.asm	/^     d01:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d01	usertests.asm	/^     d01:	6a 01                	push   $0x1$/;"	l
d03	usertests.asm	/^     d03:	e8 74 34 00 00       	call   417c <printf>$/;"	l
d04	sh.asm	/^     d04:	0f b6 d0             	movzbl %al,%edx$/;"	l
d07	sh.asm	/^     d07:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d08	usertests.asm	/^     d08:	83 c4 10             	add    $0x10,%esp$/;"	l
d0a	sh.asm	/^     d0a:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d0b	usertests.asm	/^     d0b:	c9                   	leave  $/;"	l
d0c	usertests.asm	/^     d0c:	c3                   	ret    $/;"	l
d0d	sh.asm	/^     d0d:	0f b6 c8             	movzbl %al,%ecx$/;"	l
d0d	usertests.asm	/^     d0d:	55                   	push   %ebp$/;"	l
d0e	usertests.asm	/^     d0e:	89 e5                	mov    %esp,%ebp$/;"	l
d1	kill.asm	/^  d1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d10	sh.asm	/^     d10:	89 d0                	mov    %edx,%eax$/;"	l
d10	usertests.asm	/^     d10:	83 ec 18             	sub    $0x18,%esp$/;"	l
d12	sh.asm	/^     d12:	29 c8                	sub    %ecx,%eax$/;"	l
d13	usertests.asm	/^     d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d14	sh.asm	/^     d14:	5d                   	pop    %ebp$/;"	l
d15	sh.asm	/^     d15:	c3                   	ret    $/;"	l
d16	sh.asm	/^     d16:	55                   	push   %ebp$/;"	l
d17	sh.asm	/^     d17:	89 e5                	mov    %esp,%ebp$/;"	l
d19	sh.asm	/^     d19:	83 ec 10             	sub    $0x10,%esp$/;"	l
d1a	usertests.asm	/^     d1a:	eb 4f                	jmp    d6b <exitwait+0x5e>$/;"	l
d1c	sh.asm	/^     d1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
d1c	usertests.asm	/^     d1c:	e8 df 32 00 00       	call   4000 <fork>$/;"	l
d2	echo.asm	/^  d2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2	ls.asm	/^  d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
d2	mkdir.asm	/^  d2:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
d2	rm.asm	/^  d2:	89 4d 08             	mov    %ecx,0x8(%ebp)$/;"	l
d21	usertests.asm	/^     d21:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d23	sh.asm	/^     d23:	eb 04                	jmp    d29 <strlen+0x13>$/;"	l
d24	usertests.asm	/^     d24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d25	sh.asm	/^     d25:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
d28	usertests.asm	/^     d28:	79 14                	jns    d3e <exitwait+0x31>$/;"	l
d29	sh.asm	/^     d29:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
d2a	usertests.asm	/^     d2a:	83 ec 08             	sub    $0x8,%esp$/;"	l
d2c	sh.asm	/^     d2c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2d	usertests.asm	/^     d2d:	68 d5 45 00 00       	push   $0x45d5$/;"	l
d2f	sh.asm	/^     d2f:	01 d0                	add    %edx,%eax$/;"	l
d3	init.asm	/^  d3:	68 ca 08 00 00       	push   $0x8ca$/;"	l
d3	ln.asm	/^  d3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d3	sh.asm	/^      d3:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d3	stressfs.asm	/^  d3:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)$/;"	l
d3	usertests.asm	/^      d3:	e8 30 3f 00 00       	call   4008 <exit>$/;"	l
d3	wc.asm	/^  d3:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
d31	sh.asm	/^     d31:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d32	usertests.asm	/^     d32:	6a 01                	push   $0x1$/;"	l
d34	sh.asm	/^     d34:	84 c0                	test   %al,%al$/;"	l
d34	usertests.asm	/^     d34:	e8 43 34 00 00       	call   417c <printf>$/;"	l
d36	sh.asm	/^     d36:	75 ed                	jne    d25 <strlen+0xf>$/;"	l
d38	sh.asm	/^     d38:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d39	usertests.asm	/^     d39:	83 c4 10             	add    $0x10,%esp$/;"	l
d3b	sh.asm	/^     d3b:	c9                   	leave  $/;"	l
d3c	sh.asm	/^     d3c:	c3                   	ret    $/;"	l
d3c	usertests.asm	/^     d3c:	eb 45                	jmp    d83 <exitwait+0x76>$/;"	l
d3d	sh.asm	/^     d3d:	55                   	push   %ebp$/;"	l
d3e	sh.asm	/^     d3e:	89 e5                	mov    %esp,%ebp$/;"	l
d3e	usertests.asm	/^     d3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d4	cat.asm	/^  d4:	79 29                	jns    ff <main+0x85>$/;"	l
d4	forktest.asm	/^  d4:	6a 01                	push   $0x1$/;"	l
d4	grep.asm	/^  d4:	83 ec 04             	sub    $0x4,%esp$/;"	l
d4	zombie.asm	/^  d4:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
d40	sh.asm	/^     d40:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
d42	usertests.asm	/^     d42:	74 1e                	je     d62 <exitwait+0x55>$/;"	l
d43	sh.asm	/^     d43:	50                   	push   %eax$/;"	l
d44	sh.asm	/^     d44:	ff 75 0c             	push   0xc(%ebp)$/;"	l
d44	usertests.asm	/^     d44:	e8 c7 32 00 00       	call   4010 <wait>$/;"	l
d47	sh.asm	/^     d47:	ff 75 08             	push   0x8(%ebp)$/;"	l
d49	usertests.asm	/^     d49:	39 45 f0             	cmp    %eax,-0x10(%ebp)$/;"	l
d4a	sh.asm	/^     d4a:	e8 32 ff ff ff       	call   c81 <stosb>$/;"	l
d4c	usertests.asm	/^     d4c:	74 19                	je     d67 <exitwait+0x5a>$/;"	l
d4e	usertests.asm	/^     d4e:	83 ec 08             	sub    $0x8,%esp$/;"	l
d4f	sh.asm	/^     d4f:	83 c4 0c             	add    $0xc,%esp$/;"	l
d5	echo.asm	/^  d5:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d5	kill.asm	/^  d5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d5	ls.asm	/^  d5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d5	mkdir.asm	/^  d5:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d5	rm.asm	/^  d5:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d51	usertests.asm	/^     d51:	68 52 4a 00 00       	push   $0x4a52$/;"	l
d52	sh.asm	/^     d52:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d55	sh.asm	/^     d55:	c9                   	leave  $/;"	l
d56	sh.asm	/^     d56:	c3                   	ret    $/;"	l
d56	usertests.asm	/^     d56:	6a 01                	push   $0x1$/;"	l
d57	sh.asm	/^     d57:	55                   	push   %ebp$/;"	l
d58	sh.asm	/^     d58:	89 e5                	mov    %esp,%ebp$/;"	l
d58	usertests.asm	/^     d58:	e8 1f 34 00 00       	call   417c <printf>$/;"	l
d5a	sh.asm	/^     d5a:	83 ec 04             	sub    $0x4,%esp$/;"	l
d5d	sh.asm	/^     d5d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d5d	usertests.asm	/^     d5d:	83 c4 10             	add    $0x10,%esp$/;"	l
d6	cat.asm	/^  d6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d6	forktest.asm	/^  d6:	e8 25 ff ff ff       	call   0 <printf>$/;"	l
d6	sh.asm	/^      d6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d6	wc.asm	/^  d6:	ff 75 ec             	push   -0x14(%ebp)$/;"	l
d60	sh.asm	/^     d60:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
d60	usertests.asm	/^     d60:	eb 21                	jmp    d83 <exitwait+0x76>$/;"	l
d62	usertests.asm	/^     d62:	e8 a1 32 00 00       	call   4008 <exit>$/;"	l
d63	sh.asm	/^     d63:	eb 14                	jmp    d79 <strchr+0x22>$/;"	l
d65	sh.asm	/^     d65:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d67	usertests.asm	/^     d67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
d68	sh.asm	/^     d68:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d6b	sh.asm	/^     d6b:	38 45 fc             	cmp    %al,-0x4(%ebp)$/;"	l
d6b	usertests.asm	/^     d6b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)$/;"	l
d6e	sh.asm	/^     d6e:	75 05                	jne    d75 <strchr+0x1e>$/;"	l
d6f	usertests.asm	/^     d6f:	7e ab                	jle    d1c <exitwait+0xf>$/;"	l
d7	grep.asm	/^  d7:	52                   	push   %edx$/;"	l
d7	ln.asm	/^  d7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d7	stressfs.asm	/^  d7:	7e dc                	jle    b5 <main+0xb5>$/;"	l
d7	zombie.asm	/^  d7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d70	sh.asm	/^     d70:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d71	usertests.asm	/^     d71:	83 ec 08             	sub    $0x8,%esp$/;"	l
d73	sh.asm	/^     d73:	eb 13                	jmp    d88 <strchr+0x31>$/;"	l
d74	usertests.asm	/^     d74:	68 62 4a 00 00       	push   $0x4a62$/;"	l
d75	sh.asm	/^     d75:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d79	sh.asm	/^     d79:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d79	usertests.asm	/^     d79:	6a 01                	push   $0x1$/;"	l
d7b	usertests.asm	/^     d7b:	e8 fc 33 00 00       	call   417c <printf>$/;"	l
d7c	sh.asm	/^     d7c:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d7f	sh.asm	/^     d7f:	84 c0                	test   %al,%al$/;"	l
d8	echo.asm	/^  d8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d8	grep.asm	/^  d8:	50                   	push   %eax$/;"	l
d8	init.asm	/^  d8:	6a 01                	push   $0x1$/;"	l
d8	kill.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	mkdir.asm	/^  d8:	88 10                	mov    %dl,(%eax)$/;"	l
d8	rm.asm	/^  d8:	88 10                	mov    %dl,(%eax)$/;"	l
d8	usertests.asm	/^      d8:	a1 8c 64 00 00       	mov    0x648c,%eax$/;"	l
d80	usertests.asm	/^     d80:	83 c4 10             	add    $0x10,%esp$/;"	l
d81	sh.asm	/^     d81:	75 e2                	jne    d65 <strchr+0xe>$/;"	l
d83	sh.asm	/^     d83:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d83	usertests.asm	/^     d83:	c9                   	leave  $/;"	l
d84	usertests.asm	/^     d84:	c3                   	ret    $/;"	l
d85	usertests.asm	/^     d85:	55                   	push   %ebp$/;"	l
d86	usertests.asm	/^     d86:	89 e5                	mov    %esp,%ebp$/;"	l
d88	sh.asm	/^     d88:	c9                   	leave  $/;"	l
d88	usertests.asm	/^     d88:	83 ec 18             	sub    $0x18,%esp$/;"	l
d89	sh.asm	/^     d89:	c3                   	ret    $/;"	l
d8a	sh.asm	/^     d8a:	55                   	push   %ebp$/;"	l
d8b	sh.asm	/^     d8b:	89 e5                	mov    %esp,%ebp$/;"	l
d8b	usertests.asm	/^     d8b:	83 ec 08             	sub    $0x8,%esp$/;"	l
d8d	sh.asm	/^     d8d:	83 ec 18             	sub    $0x18,%esp$/;"	l
d8e	usertests.asm	/^     d8e:	68 6f 4a 00 00       	push   $0x4a6f$/;"	l
d9	cat.asm	/^  d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
d9	grep.asm	/^  d9:	ff 75 0c             	push   0xc(%ebp)$/;"	l
d9	ls.asm	/^  d9:	79 1a                	jns    f5 <ls+0x3f>$/;"	l
d9	sh.asm	/^      d9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d9	stressfs.asm	/^  d9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d9	wc.asm	/^  d9:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
d90	sh.asm	/^     d90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d93	usertests.asm	/^     d93:	6a 01                	push   $0x1$/;"	l
d95	usertests.asm	/^     d95:	e8 e2 33 00 00       	call   417c <printf>$/;"	l
d97	sh.asm	/^     d97:	eb 42                	jmp    ddb <gets+0x51>$/;"	l
d99	sh.asm	/^     d99:	83 ec 04             	sub    $0x4,%esp$/;"	l
d9a	usertests.asm	/^     d9a:	83 c4 10             	add    $0x10,%esp$/;"	l
d9c	sh.asm	/^     d9c:	6a 01                	push   $0x1$/;"	l
d9d	usertests.asm	/^     d9d:	e8 e6 32 00 00       	call   4088 <getpid>$/;"	l
d9e	sh.asm	/^     d9e:	8d 45 ef             	lea    -0x11(%ebp),%eax$/;"	l
da	init.asm	/^  da:	e8 ed 03 00 00       	call   4cc <printf>$/;"	l
da	ln.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	mkdir.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	rm.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	zombie.asm	/^  da:	01 d0                	add    %edx,%eax$/;"	l
da1	sh.asm	/^     da1:	50                   	push   %eax$/;"	l
da2	sh.asm	/^     da2:	6a 00                	push   $0x0$/;"	l
da2	usertests.asm	/^     da2:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
da4	sh.asm	/^     da4:	e8 47 01 00 00       	call   ef0 <read>$/;"	l
da5	usertests.asm	/^     da5:	e8 56 32 00 00       	call   4000 <fork>$/;"	l
da9	sh.asm	/^     da9:	83 c4 10             	add    $0x10,%esp$/;"	l
daa	usertests.asm	/^     daa:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
dac	sh.asm	/^     dac:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
dad	usertests.asm	/^     dad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
daf	sh.asm	/^     daf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf	typeref:typename:uchar[]
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	typeref:typename:uint	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	kernel.ld	/^	PROVIDE(data = .);$/;"	s	assignment:provide
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	typeref:typename:char[]	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate	typeref:typename:uint
db	echo.asm	/^  db:	0f b6 00             	movzbl (%eax),%eax$/;"	l
db	forktest.asm	/^  db:	83 c4 10             	add    $0x10,%esp$/;"	l
db	kill.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	ls.asm	/^  db:	83 ec 04             	sub    $0x4,%esp$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	typeref:typename:uint:1
db1	usertests.asm	/^     db1:	0f 85 b7 00 00 00    	jne    e6e <mem+0xe9>$/;"	l
db3	sh.asm	/^     db3:	7e 33                	jle    de8 <gets+0x5e>$/;"	l
db5	sh.asm	/^     db5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
db7	usertests.asm	/^     db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
db8	sh.asm	/^     db8:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
dbb	sh.asm	/^     dbb:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
dbe	sh.asm	/^     dbe:	89 c2                	mov    %eax,%edx$/;"	l
dbe	usertests.asm	/^     dbe:	eb 0e                	jmp    dce <mem+0x49>$/;"	l
dc	grep.asm	/^  dc:	e8 bb 04 00 00       	call   59c <read>$/;"	l
dc	sh.asm	/^      dc:	50                   	push   %eax$/;"	l
dc	stressfs.asm	/^  dc:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
dc	wc.asm	/^  dc:	68 55 09 00 00       	push   $0x955$/;"	l
dc	zombie.asm	/^  dc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dc0	sh.asm	/^     dc0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dc0	usertests.asm	/^     dc0:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dc3	sh.asm	/^     dc3:	01 c2                	add    %eax,%edx$/;"	l
dc3	usertests.asm	/^     dc3:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
dc5	sh.asm	/^     dc5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dc6	usertests.asm	/^     dc6:	89 10                	mov    %edx,(%eax)$/;"	l
dc8	usertests.asm	/^     dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dc9	sh.asm	/^     dc9:	88 02                	mov    %al,(%edx)$/;"	l
dcb	sh.asm	/^     dcb:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dcb	usertests.asm	/^     dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dce	usertests.asm	/^     dce:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dcf	sh.asm	/^     dcf:	3c 0a                	cmp    $0xa,%al$/;"	l
dd	kill.asm	/^  dd:	74 10                	je     ef <strcmp+0x27>$/;"	l
dd	ln.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	mkdir.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	rm.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	sh.asm	/^      dd:	e8 1e ff ff ff       	call   0 <runcmd>$/;"	l
dd	usertests.asm	/^      dd:	83 ec 08             	sub    $0x8,%esp$/;"	l
dd1	sh.asm	/^     dd1:	74 16                	je     de9 <gets+0x5f>$/;"	l
dd1	usertests.asm	/^     dd1:	68 11 27 00 00       	push   $0x2711$/;"	l
dd3	sh.asm	/^     dd3:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dd6	usertests.asm	/^     dd6:	e8 75 36 00 00       	call   4450 <malloc>$/;"	l
dd7	sh.asm	/^     dd7:	3c 0d                	cmp    $0xd,%al$/;"	l
dd9	sh.asm	/^     dd9:	74 0e                	je     de9 <gets+0x5f>$/;"	l
ddb	sh.asm	/^     ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ddb	usertests.asm	/^     ddb:	83 c4 10             	add    $0x10,%esp$/;"	l
dde	sh.asm	/^     dde:	83 c0 01             	add    $0x1,%eax$/;"	l
dde	usertests.asm	/^     dde:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
de	echo.asm	/^  de:	38 c2                	cmp    %al,%dl$/;"	l
de	forktest.asm	/^  de:	e8 7c 02 00 00       	call   35f <exit>$/;"	l
de	ls.asm	/^  de:	ff 75 08             	push   0x8(%ebp)$/;"	l
de1	sh.asm	/^     de1:	39 45 0c             	cmp    %eax,0xc(%ebp)$/;"	l
de1	usertests.asm	/^     de1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
de4	sh.asm	/^     de4:	7f b3                	jg     d99 <gets+0xf>$/;"	l
de5	usertests.asm	/^     de5:	75 d9                	jne    dc0 <mem+0x3b>$/;"	l
de6	sh.asm	/^     de6:	eb 01                	jmp    de9 <gets+0x5f>$/;"	l
de7	usertests.asm	/^     de7:	eb 1c                	jmp    e05 <mem+0x80>$/;"	l
de8	sh.asm	/^     de8:	90                   	nop$/;"	l
de9	sh.asm	/^     de9:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
de9	usertests.asm	/^     de9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
dec	sh.asm	/^     dec:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dec	usertests.asm	/^     dec:	8b 00                	mov    (%eax),%eax$/;"	l
dee	usertests.asm	/^     dee:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
def	sh.asm	/^     def:	01 d0                	add    %edx,%eax$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf	typeref:typename:uint
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	typeref:typename:uint
dev	log.c	/^  int dev;$/;"	m	struct:log	typeref:typename:int	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat	typeref:typename:int
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw[]
devsw	file.h	/^struct devsw {$/;"	s
df	init.asm	/^  df:	83 c4 10             	add    $0x10,%esp$/;"	l
df	kill.asm	/^  df:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df	ln.asm	/^  df:	74 10                	je     f1 <strcmp+0x27>$/;"	l
df	mkdir.asm	/^  df:	75 e2                	jne    c3 <strcpy+0xd>$/;"	l
df	rm.asm	/^  df:	75 e2                	jne    c3 <strcpy+0xd>$/;"	l
df	stressfs.asm	/^  df:	e8 ed 02 00 00       	call   3d1 <close>$/;"	l
df	zombie.asm	/^  df:	84 c0                	test   %al,%al$/;"	l
df1	sh.asm	/^     df1:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
df1	usertests.asm	/^     df1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
df4	sh.asm	/^     df4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df4	usertests.asm	/^     df4:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
df7	sh.asm	/^     df7:	c9                   	leave  $/;"	l
df7	usertests.asm	/^     df7:	e8 12 35 00 00       	call   430e <free>$/;"	l
df8	sh.asm	/^     df8:	c3                   	ret    $/;"	l
df9	sh.asm	/^     df9:	55                   	push   %ebp$/;"	l
dfa	sh.asm	/^     dfa:	89 e5                	mov    %esp,%ebp$/;"	l
dfc	sh.asm	/^     dfc:	83 ec 18             	sub    $0x18,%esp$/;"	l
dfc	usertests.asm	/^     dfc:	83 c4 10             	add    $0x10,%esp$/;"	l
dff	sh.asm	/^     dff:	83 ec 08             	sub    $0x8,%esp$/;"	l
dff	usertests.asm	/^     dff:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f	typeref:typename:void
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f	typeref:typename:int
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	typeref:struct:inode *
dirtest	usertests.c	/^void dirtest(void)$/;"	f	typeref:typename:void
disksize	memide.c	/^static int disksize;$/;"	v	typeref:typename:int	file:
dist	Makefile	/^dist:$/;"	t
dist-test	Makefile	/^dist-test:$/;"	t
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
doprocdump	kernel.asm	/^      doprocdump = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	typeref:typename:uint:2
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	typeref:typename:uint:2
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	typeref:typename:ushort
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	typeref:typename:ushort
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	68 80 0b 00 00       	push   $0xb80$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
e	echo.asm	/^   e:	51                   	push   %ecx$/;"	l
e	init.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	51                   	push   %ecx$/;"	l
e	ln.asm	/^   e:	51                   	push   %ecx$/;"	l
e	mkdir.asm	/^   e:	51                   	push   %ecx$/;"	l
e	rm.asm	/^   e:	51                   	push   %ecx$/;"	l
e	stressfs.asm	/^   e:	81 ec 24 02 00 00    	sub    $0x224,%esp$/;"	l
e	usertests.asm	/^       e:	68 4a 45 00 00       	push   $0x454a$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	cat.asm	/^  e0:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
e0	echo.asm	/^  e0:	74 de                	je     c0 <strcmp+0x5>$/;"	l
e0	usertests.asm	/^      e0:	68 b8 45 00 00       	push   $0x45b8$/;"	l
e02	sh.asm	/^     e02:	6a 00                	push   $0x0$/;"	l
e02	usertests.asm	/^     e02:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e04	sh.asm	/^     e04:	ff 75 08             	push   0x8(%ebp)$/;"	l
e05	usertests.asm	/^     e05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e07	sh.asm	/^     e07:	e8 0c 01 00 00       	call   f18 <open>$/;"	l
e09	usertests.asm	/^     e09:	75 de                	jne    de9 <mem+0x64>$/;"	l
e0b	usertests.asm	/^     e0b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e0c	sh.asm	/^     e0c:	83 c4 10             	add    $0x10,%esp$/;"	l
e0e	usertests.asm	/^     e0e:	68 00 50 00 00       	push   $0x5000$/;"	l
e0f	sh.asm	/^     e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e1	grep.asm	/^  e1:	83 c4 10             	add    $0x10,%esp$/;"	l
e1	ln.asm	/^  e1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1	ls.asm	/^  e1:	68 c4 0a 00 00       	push   $0xac4$/;"	l
e1	mkdir.asm	/^  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e1	rm.asm	/^  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e1	wc.asm	/^  e1:	6a 01                	push   $0x1$/;"	l
e1	zombie.asm	/^  e1:	75 ed                	jne    d0 <strlen+0xf>$/;"	l
e12	sh.asm	/^     e12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e13	usertests.asm	/^     e13:	e8 38 36 00 00       	call   4450 <malloc>$/;"	l
e16	sh.asm	/^     e16:	79 07                	jns    e1f <stat+0x26>$/;"	l
e18	sh.asm	/^     e18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
e18	usertests.asm	/^     e18:	83 c4 10             	add    $0x10,%esp$/;"	l
e1b	usertests.asm	/^     e1b:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e1d	sh.asm	/^     e1d:	eb 25                	jmp    e44 <stat+0x4b>$/;"	l
e1e	usertests.asm	/^     e1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e1f	sh.asm	/^     e1f:	83 ec 08             	sub    $0x8,%esp$/;"	l
e2	echo.asm	/^  e2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e2	init.asm	/^  e2:	e8 79 02 00 00       	call   360 <wait>$/;"	l
e2	kill.asm	/^  e2:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e2	sh.asm	/^      e2:	83 c4 10             	add    $0x10,%esp$/;"	l
e22	sh.asm	/^     e22:	ff 75 0c             	push   0xc(%ebp)$/;"	l
e22	usertests.asm	/^     e22:	75 25                	jne    e49 <mem+0xc4>$/;"	l
e24	usertests.asm	/^     e24:	83 ec 08             	sub    $0x8,%esp$/;"	l
e25	sh.asm	/^     e25:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
e27	usertests.asm	/^     e27:	68 79 4a 00 00       	push   $0x4a79$/;"	l
e28	sh.asm	/^     e28:	e8 03 01 00 00       	call   f30 <fstat>$/;"	l
e2c	usertests.asm	/^     e2c:	6a 01                	push   $0x1$/;"	l
e2d	sh.asm	/^     e2d:	83 c4 10             	add    $0x10,%esp$/;"	l
e2e	usertests.asm	/^     e2e:	e8 49 33 00 00       	call   417c <printf>$/;"	l
e3	cat.asm	/^  e3:	01 d0                	add    %edx,%eax$/;"	l
e3	forktest.asm	/^  e3:	83 ec 08             	sub    $0x8,%esp$/;"	l
e3	wc.asm	/^  e3:	e8 a0 04 00 00       	call   588 <printf>$/;"	l
e3	zombie.asm	/^  e3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e30	sh.asm	/^     e30:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e33	sh.asm	/^     e33:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e33	usertests.asm	/^     e33:	83 c4 10             	add    $0x10,%esp$/;"	l
e36	sh.asm	/^     e36:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
e36	usertests.asm	/^     e36:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e39	sh.asm	/^     e39:	e8 c2 00 00 00       	call   f00 <close>$/;"	l
e39	usertests.asm	/^     e39:	ff 75 f0             	push   -0x10(%ebp)$/;"	l
e3c	usertests.asm	/^     e3c:	e8 f7 31 00 00       	call   4038 <kill>$/;"	l
e3e	sh.asm	/^     e3e:	83 c4 10             	add    $0x10,%esp$/;"	l
e4	grep.asm	/^  e4:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e4	ln.asm	/^  e4:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e4	mkdir.asm	/^  e4:	c9                   	leave  $/;"	l
e4	rm.asm	/^  e4:	c9                   	leave  $/;"	l
e4	stressfs.asm	/^  e4:	83 c4 10             	add    $0x10,%esp$/;"	l
e41	sh.asm	/^     e41:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e41	usertests.asm	/^     e41:	83 c4 10             	add    $0x10,%esp$/;"	l
e44	sh.asm	/^     e44:	c9                   	leave  $/;"	l
e44	usertests.asm	/^     e44:	e8 bf 31 00 00       	call   4008 <exit>$/;"	l
e45	sh.asm	/^     e45:	c3                   	ret    $/;"	l
e46	sh.asm	/^     e46:	55                   	push   %ebp$/;"	l
e47	sh.asm	/^     e47:	89 e5                	mov    %esp,%ebp$/;"	l
e49	sh.asm	/^     e49:	83 ec 10             	sub    $0x10,%esp$/;"	l
e49	usertests.asm	/^     e49:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e4c	sh.asm	/^     e4c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
e4c	usertests.asm	/^     e4c:	ff 75 f4             	push   -0xc(%ebp)$/;"	l
e4f	usertests.asm	/^     e4f:	e8 ba 34 00 00       	call   430e <free>$/;"	l
e5	cat.asm	/^  e5:	8b 00                	mov    (%eax),%eax$/;"	l
e5	echo.asm	/^  e5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e5	kill.asm	/^  e5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e5	mkdir.asm	/^  e5:	c3                   	ret    $/;"	l
e5	rm.asm	/^  e5:	c3                   	ret    $/;"	l
e5	sh.asm	/^      e5:	e9 5c 01 00 00       	jmp    246 <runcmd+0x246>$/;"	l
e5	usertests.asm	/^      e5:	50                   	push   %eax$/;"	l
e53	sh.asm	/^     e53:	eb 25                	jmp    e7a <atoi+0x34>$/;"	l
e54	usertests.asm	/^     e54:	83 c4 10             	add    $0x10,%esp$/;"	l
e55	sh.asm	/^     e55:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
e57	usertests.asm	/^     e57:	83 ec 08             	sub    $0x8,%esp$/;"	l
e58	sh.asm	/^     e58:	89 d0                	mov    %edx,%eax$/;"	l
e5a	sh.asm	/^     e5a:	c1 e0 02             	shl    $0x2,%eax$/;"	l
e5a	usertests.asm	/^     e5a:	68 93 4a 00 00       	push   $0x4a93$/;"	l
e5d	sh.asm	/^     e5d:	01 d0                	add    %edx,%eax$/;"	l
e5f	sh.asm	/^     e5f:	01 c0                	add    %eax,%eax$/;"	l
e5f	usertests.asm	/^     e5f:	6a 01                	push   $0x1$/;"	l
e6	forktest.asm	/^  e6:	68 52 04 00 00       	push   $0x452$/;"	l
e6	ls.asm	/^  e6:	6a 02                	push   $0x2$/;"	l
e6	mkdir.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	rm.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	usertests.asm	/^      e6:	e8 91 40 00 00       	call   417c <printf>$/;"	l
e6	zombie.asm	/^  e6:	c9                   	leave  $/;"	l
e61	sh.asm	/^     e61:	89 c1                	mov    %eax,%ecx$/;"	l
e61	usertests.asm	/^     e61:	e8 16 33 00 00       	call   417c <printf>$/;"	l
e63	sh.asm	/^     e63:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e66	sh.asm	/^     e66:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e66	usertests.asm	/^     e66:	83 c4 10             	add    $0x10,%esp$/;"	l
e69	sh.asm	/^     e69:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
e69	usertests.asm	/^     e69:	e8 9a 31 00 00       	call   4008 <exit>$/;"	l
e6c	sh.asm	/^     e6c:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e6e	usertests.asm	/^     e6e:	e8 9d 31 00 00       	call   4010 <wait>$/;"	l
e6f	sh.asm	/^     e6f:	0f be c0             	movsbl %al,%eax$/;"	l
e7	cat.asm	/^  e7:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7	grep.asm	/^  e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
e7	init.asm	/^  e7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e7	ln.asm	/^  e7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e7	mkdir.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	rm.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	stressfs.asm	/^  e7:	83 ec 08             	sub    $0x8,%esp$/;"	l
e7	zombie.asm	/^  e7:	c3                   	ret    $/;"	l
e72	sh.asm	/^     e72:	01 c8                	add    %ecx,%eax$/;"	l
e73	usertests.asm	/^     e73:	90                   	nop$/;"	l
e74	sh.asm	/^     e74:	83 e8 30             	sub    $0x30,%eax$/;"	l
e74	usertests.asm	/^     e74:	c9                   	leave  $/;"	l
e75	usertests.asm	/^     e75:	c3                   	ret    $/;"	l
e76	usertests.asm	/^     e76:	55                   	push   %ebp$/;"	l
e77	sh.asm	/^     e77:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e77	usertests.asm	/^     e77:	89 e5                	mov    %esp,%ebp$/;"	l
e79	usertests.asm	/^     e79:	83 ec 38             	sub    $0x38,%esp$/;"	l
e7a	sh.asm	/^     e7a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e7c	usertests.asm	/^     e7c:	83 ec 08             	sub    $0x8,%esp$/;"	l
e7d	sh.asm	/^     e7d:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e7f	usertests.asm	/^     e7f:	68 9b 4a 00 00       	push   $0x4a9b$/;"	l
e8	echo.asm	/^  e8:	0f b6 d0             	movzbl %al,%edx$/;"	l
e8	kill.asm	/^  e8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e8	ls.asm	/^  e8:	e8 20 06 00 00       	call   70d <printf>$/;"	l
e8	wc.asm	/^  e8:	83 c4 20             	add    $0x20,%esp$/;"	l
e8	zombie.asm	/^  e8:	55                   	push   %ebp$/;"	l
e80	sh.asm	/^     e80:	3c 2f                	cmp    $0x2f,%al$/;"	l
e82	sh.asm	/^     e82:	7e 0a                	jle    e8e <atoi+0x48>$/;"	l
e84	sh.asm	/^     e84:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e84	usertests.asm	/^     e84:	6a 01                	push   $0x1$/;"	l
e86	usertests.asm	/^     e86:	e8 f1 32 00 00       	call   417c <printf>$/;"	l
e87	sh.asm	/^     e87:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e8a	sh.asm	/^     e8a:	3c 39                	cmp    $0x39,%al$/;"	l
e8b	usertests.asm	/^     e8b:	83 c4 10             	add    $0x10,%esp$/;"	l
e8c	sh.asm	/^     e8c:	7e c7                	jle    e55 <atoi+0xf>$/;"	l
e8e	sh.asm	/^     e8e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e8e	usertests.asm	/^     e8e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e9	mkdir.asm	/^  e9:	eb 08                	jmp    f3 <strcmp+0xd>$/;"	l
e9	rm.asm	/^  e9:	eb 08                	jmp    f3 <strcmp+0xd>$/;"	l
e9	zombie.asm	/^  e9:	89 e5                	mov    %esp,%ebp$/;"	l
e91	sh.asm	/^     e91:	c9                   	leave  $/;"	l
e91	usertests.asm	/^     e91:	68 aa 4a 00 00       	push   $0x4aaa$/;"	l
e92	sh.asm	/^     e92:	c3                   	ret    $/;"	l
e93	sh.asm	/^     e93:	55                   	push   %ebp$/;"	l
e94	sh.asm	/^     e94:	89 e5                	mov    %esp,%ebp$/;"	l
e96	sh.asm	/^     e96:	83 ec 10             	sub    $0x10,%esp$/;"	l
e96	usertests.asm	/^     e96:	e8 bd 31 00 00       	call   4058 <unlink>$/;"	l
e99	sh.asm	/^     e99:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e9b	usertests.asm	/^     e9b:	83 c4 10             	add    $0x10,%esp$/;"	l
e9c	sh.asm	/^     e9c:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e9e	usertests.asm	/^     e9e:	83 ec 08             	sub    $0x8,%esp$/;"	l
e9f	sh.asm	/^     e9f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	cat.asm	/^  ea:	50                   	push   %eax$/;"	l
ea	init.asm	/^  ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ea	ln.asm	/^  ea:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ea	sh.asm	/^      ea:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea	stressfs.asm	/^  ea:	68 f1 08 00 00       	push   $0x8f1$/;"	l
ea1	usertests.asm	/^     ea1:	68 02 02 00 00       	push   $0x202$/;"	l
ea2	sh.asm	/^     ea2:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
ea5	sh.asm	/^     ea5:	eb 17                	jmp    ebe <memmove+0x2b>$/;"	l
ea6	usertests.asm	/^     ea6:	68 aa 4a 00 00       	push   $0x4aaa$/;"	l
ea7	sh.asm	/^     ea7:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
eaa	sh.asm	/^     eaa:	8d 42 01             	lea    0x1(%edx),%eax$/;"	l
eab	usertests.asm	/^     eab:	e8 98 31 00 00       	call   4048 <open>$/;"	l
ead	sh.asm	/^     ead:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	typeref:typename:uint
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	typeref:typename:uint
eb	cat.asm	/^  eb:	68 d0 08 00 00       	push   $0x8d0$/;"	l
eb	echo.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb	forktest.asm	/^  eb:	6a 01                	push   $0x1$/;"	l
eb	grep.asm	/^  eb:	0f 8f 21 ff ff ff    	jg     12 <grep+0x12>$/;"	l
eb	kill.asm	/^  eb:	38 c2                	cmp    %al,%dl$/;"	l
eb	mkdir.asm	/^  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
eb	rm.asm	/^  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
eb	usertests.asm	/^      eb:	83 c4 10             	add    $0x10,%esp$/;"	l
eb	wc.asm	/^  eb:	90                   	nop$/;"	l
eb	zombie.asm	/^  eb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
eb0	sh.asm	/^     eb0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
eb0	usertests.asm	/^     eb0:	83 c4 10             	add    $0x10,%esp$/;"	l
eb3	sh.asm	/^     eb3:	8d 48 01             	lea    0x1(%eax),%ecx$/;"	l
eb3	usertests.asm	/^     eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
eb6	sh.asm	/^     eb6:	89 4d fc             	mov    %ecx,-0x4(%ebp)$/;"	l
eb6	usertests.asm	/^     eb6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
eb9	sh.asm	/^     eb9:	0f b6 12             	movzbl (%edx),%edx$/;"	l
eba	usertests.asm	/^     eba:	79 17                	jns    ed3 <sharedfd+0x5d>$/;"	l
ebc	sh.asm	/^     ebc:	88 10                	mov    %dl,(%eax)$/;"	l
ebc	usertests.asm	/^     ebc:	83 ec 08             	sub    $0x8,%esp$/;"	l
ebe	sh.asm	/^     ebe:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
ebf	usertests.asm	/^     ebf:	68 b4 4a 00 00       	push   $0x4ab4$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	typeref:typename:uint *
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context	typeref:typename:uint
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	typeref:typename:uint
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	typeref:typename:uint
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context	typeref:typename:uint
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	typeref:typename:uint
ec	wc.asm	/^  ec:	c9                   	leave  $/;"	l
ec1	sh.asm	/^     ec1:	8d 50 ff             	lea    -0x1(%eax),%edx$/;"	l
ec4	sh.asm	/^     ec4:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ec4	usertests.asm	/^     ec4:	6a 01                	push   $0x1$/;"	l
ec6	usertests.asm	/^     ec6:	e8 b1 32 00 00       	call   417c <printf>$/;"	l
ec7	sh.asm	/^     ec7:	85 c0                	test   %eax,%eax$/;"	l
ec9	sh.asm	/^     ec9:	7f dc                	jg     ea7 <memmove+0x14>$/;"	l
ecb	sh.asm	/^     ecb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ecb	usertests.asm	/^     ecb:	83 c4 10             	add    $0x10,%esp$/;"	l
ece	sh.asm	/^     ece:	c9                   	leave  $/;"	l
ece	usertests.asm	/^     ece:	e9 84 01 00 00       	jmp    1057 <sharedfd+0x1e1>$/;"	l
ecf	sh.asm	/^     ecf:	c3                   	ret    $/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v	typeref:typename:char * []
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	typeref:typename:uint
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	typeref:typename:uint
ed	forktest.asm	/^  ed:	e8 0e ff ff ff       	call   0 <printf>$/;"	l
ed	kill.asm	/^  ed:	74 de                	je     cd <strcmp+0x5>$/;"	l
ed	ln.asm	/^  ed:	38 c2                	cmp    %al,%dl$/;"	l
ed	ls.asm	/^  ed:	83 c4 10             	add    $0x10,%esp$/;"	l
ed	sh.asm	/^      ed:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ed	wc.asm	/^  ed:	c3                   	ret    $/;"	l
ed0	sh.asm	/^     ed0:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ed3	usertests.asm	/^     ed3:	e8 28 31 00 00       	call   4000 <fork>$/;"	l
ed5	sh.asm	/^     ed5:	cd 40                	int    $0x40$/;"	l
ed7	sh.asm	/^     ed7:	c3                   	ret    $/;"	l
ed8	sh.asm	/^     ed8:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
ed8	usertests.asm	/^     ed8:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
edata	kernel.ld	/^	PROVIDE(edata = .);$/;"	s	assignment:provide
edb	usertests.asm	/^     edb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
edd	sh.asm	/^     edd:	cd 40                	int    $0x40$/;"	l
edf	sh.asm	/^     edf:	c3                   	ret    $/;"	l
edf	usertests.asm	/^     edf:	75 07                	jne    ee8 <sharedfd+0x72>$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	typeref:typename:uint
edi	proc.h	/^  uint edi;$/;"	m	struct:context	typeref:typename:uint
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	typeref:typename:uint
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	typeref:typename:uint
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	typeref:typename:uint
ee	echo.asm	/^  ee:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee	init.asm	/^  ee:	0f 88 73 ff ff ff    	js     67 <main+0x67>$/;"	l
ee	usertests.asm	/^      ee:	90                   	nop$/;"	l
ee	wc.asm	/^  ee:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
ee	zombie.asm	/^  ee:	50                   	push   %eax$/;"	l
ee0	sh.asm	/^     ee0:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
ee1	usertests.asm	/^     ee1:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
ee5	sh.asm	/^     ee5:	cd 40                	int    $0x40$/;"	l
ee6	usertests.asm	/^     ee6:	eb 05                	jmp    eed <sharedfd+0x77>$/;"	l
ee7	sh.asm	/^     ee7:	c3                   	ret    $/;"	l
ee8	sh.asm	/^     ee8:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
ee8	usertests.asm	/^     ee8:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
eed	sh.asm	/^     eed:	cd 40                	int    $0x40$/;"	l
eed	usertests.asm	/^     eed:	83 ec 04             	sub    $0x4,%esp$/;"	l
eef	sh.asm	/^     eef:	c3                   	ret    $/;"	l
ef	kill.asm	/^  ef:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ef	ln.asm	/^  ef:	74 de                	je     cf <strcmp+0x5>$/;"	l
ef	mkdir.asm	/^  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ef	rm.asm	/^  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ef	stressfs.asm	/^  ef:	6a 01                	push   $0x1$/;"	l
ef	usertests.asm	/^      ef:	c9                   	leave  $/;"	l
ef	zombie.asm	/^  ef:	ff 75 0c             	push   0xc(%ebp)$/;"	l
ef0	sh.asm	/^     ef0:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
ef0	usertests.asm	/^     ef0:	6a 0a                	push   $0xa$/;"	l
ef2	usertests.asm	/^     ef2:	50                   	push   %eax$/;"	l
ef3	usertests.asm	/^     ef3:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
ef5	sh.asm	/^     ef5:	cd 40                	int    $0x40$/;"	l
ef6	usertests.asm	/^     ef6:	50                   	push   %eax$/;"	l
ef7	sh.asm	/^     ef7:	c3                   	ret    $/;"	l
ef7	usertests.asm	/^     ef7:	e8 71 2f 00 00       	call   3e6d <memset>$/;"	l
ef8	sh.asm	/^     ef8:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
efc	usertests.asm	/^     efc:	83 c4 10             	add    $0x10,%esp$/;"	l
efd	sh.asm	/^     efd:	cd 40                	int    $0x40$/;"	l
eff	sh.asm	/^     eff:	c3                   	ret    $/;"	l
eff	usertests.asm	/^     eff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	typeref:typename:char *	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	typeref:typename:uint
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	typeref:typename:uint
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	typeref:typename:uint *
eip	proc.h	/^  uint eip;$/;"	m	struct:context	typeref:typename:uint
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	typeref:typename:uint
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	typeref:typename:uchar[12]
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end	kernel.ld	/^	PROVIDE(end = .);$/;"	s	assignment:provide
end_op	log.c	/^end_op(void)$/;"	f	typeref:typename:void
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	typeref:typename:uint
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	typeref:typename:ushort
entryother	Makefile	/^entryother: entryother.S$/;"	t
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v	typeref:typename:pde_t[]
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v	typeref:typename:pde_t[]
ep	kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe	typeref:typename:uint
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	typeref:typename:ushort
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	typeref:typename:ushort
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	typeref:typename:uint
esi	proc.h	/^  uint esi;$/;"	m	struct:context	typeref:typename:uint
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	typeref:typename:uint
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	typeref:typename:uint *
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	typeref:typename:uint
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	typeref:typename:uint
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	typeref:typename:uint *
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	typeref:typename:uint *
etext	kernel.ld	/^	PROVIDE(etext = .);	\/* Define the 'etext' symbol to this value *\/$/;"	s	assignment:provide
even	runoff.spec	/^even: bootasm.S   # mild preference$/;"	t
even	runoff.spec	/^even: bootmain.c  # mild preference$/;"	t
even	runoff.spec	/^even: console.c$/;"	t
even	runoff.spec	/^even: entry.S  # mild preference$/;"	t
even	runoff.spec	/^even: entryother.S  # mild preference$/;"	t
even	runoff.spec	/^even: ide.c$/;"	t
even	runoff.spec	/^even: kalloc.c  # mild preference$/;"	t
even	runoff.spec	/^even: kbd.h$/;"	t
even	runoff.spec	/^even: log.c$/;"	t
even	runoff.spec	/^even: main.c$/;"	t
even	runoff.spec	/^even: mp.c$/;"	t
even	runoff.spec	/^even: proc.c   # VERY important$/;"	t
even	runoff.spec	/^even: proc.h$/;"	t
even	runoff.spec	/^even: spinlock.h$/;"	t
exec	exec.c	/^exec(char *path, char **argv)$/;"	f	typeref:typename:int
execcmd	sh.c	/^execcmd(void)$/;"	f	typeref:struct:cmd *
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f	typeref:typename:void
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f	typeref:typename:void
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f	typeref:typename:void
exitwait	usertests.c	/^exitwait(void)$/;"	f	typeref:typename:void
f	echo.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	kill.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	ln.asm	/^   f:	89 cb                	mov    %ecx,%ebx$/;"	l
f	mkdir.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	rm.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f0	cat.asm	/^  f0:	6a 01                	push   $0x1$/;"	l
f0	ls.asm	/^  f0:	e9 e1 01 00 00       	jmp    2d6 <ls+0x220>$/;"	l
f0	sh.asm	/^      f0:	e8 c7 02 00 00       	call   3bc <fork1>$/;"	l
f0	usertests.asm	/^      f0:	c3                   	ret    $/;"	l
f00	sh.asm	/^     f00:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
f05	sh.asm	/^     f05:	cd 40                	int    $0x40$/;"	l
f06	usertests.asm	/^     f06:	eb 31                	jmp    f39 <sharedfd+0xc3>$/;"	l
f07	sh.asm	/^     f07:	c3                   	ret    $/;"	l
f08	sh.asm	/^     f08:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
f08	usertests.asm	/^     f08:	83 ec 04             	sub    $0x4,%esp$/;"	l
f0b	usertests.asm	/^     f0b:	6a 0a                	push   $0xa$/;"	l
f0d	sh.asm	/^     f0d:	cd 40                	int    $0x40$/;"	l
f0d	usertests.asm	/^     f0d:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
f0f	sh.asm	/^     f0f:	c3                   	ret    $/;"	l
f1	echo.asm	/^  f1:	0f b6 c8             	movzbl %al,%ecx$/;"	l
f1	grep.asm	/^  f1:	90                   	nop$/;"	l
f1	ln.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	stressfs.asm	/^  f1:	e8 27 04 00 00       	call   51d <printf>$/;"	l
f1	usertests.asm	/^      f1:	55                   	push   %ebp$/;"	l
f10	sh.asm	/^     f10:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
f10	usertests.asm	/^     f10:	50                   	push   %eax$/;"	l
f11	usertests.asm	/^     f11:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
f14	usertests.asm	/^     f14:	e8 0f 31 00 00       	call   4028 <write>$/;"	l
f15	sh.asm	/^     f15:	cd 40                	int    $0x40$/;"	l
f17	sh.asm	/^     f17:	c3                   	ret    $/;"	l
f18	sh.asm	/^     f18:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
f19	usertests.asm	/^     f19:	83 c4 10             	add    $0x10,%esp$/;"	l
f1c	usertests.asm	/^     f1c:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
f1d	sh.asm	/^     f1d:	cd 40                	int    $0x40$/;"	l
f1f	sh.asm	/^     f1f:	c3                   	ret    $/;"	l
f1f	usertests.asm	/^     f1f:	74 14                	je     f35 <sharedfd+0xbf>$/;"	l
f2	cat.asm	/^  f2:	e8 ff 03 00 00       	call   4f6 <printf>$/;"	l
f2	forktest.asm	/^  f2:	83 c4 10             	add    $0x10,%esp$/;"	l
f2	grep.asm	/^  f2:	90                   	nop$/;"	l
f2	kill.asm	/^  f2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f2	usertests.asm	/^      f2:	89 e5                	mov    %esp,%ebp$/;"	l
f2	wc.asm	/^  f2:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
f2	zombie.asm	/^  f2:	ff 75 08             	push   0x8(%ebp)$/;"	l
f20	sh.asm	/^     f20:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
f21	usertests.asm	/^     f21:	83 ec 08             	sub    $0x8,%esp$/;"	l
f24	usertests.asm	/^     f24:	68 e0 4a 00 00       	push   $0x4ae0$/;"	l
f25	sh.asm	/^     f25:	cd 40                	int    $0x40$/;"	l
f27	sh.asm	/^     f27:	c3                   	ret    $/;"	l
f28	sh.asm	/^     f28:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
f29	usertests.asm	/^     f29:	6a 01                	push   $0x1$/;"	l
f2b	usertests.asm	/^     f2b:	e8 4c 32 00 00       	call   417c <printf>$/;"	l
f2d	sh.asm	/^     f2d:	cd 40                	int    $0x40$/;"	l
f2f	sh.asm	/^     f2f:	c3                   	ret    $/;"	l
f3	grep.asm	/^  f3:	c9                   	leave  $/;"	l
f3	mkdir.asm	/^  f3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f3	rm.asm	/^  f3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f30	sh.asm	/^     f30:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
f30	usertests.asm	/^     f30:	83 c4 10             	add    $0x10,%esp$/;"	l
f33	usertests.asm	/^     f33:	eb 0d                	jmp    f42 <sharedfd+0xcc>$/;"	l
f35	sh.asm	/^     f35:	cd 40                	int    $0x40$/;"	l
f35	usertests.asm	/^     f35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f37	sh.asm	/^     f37:	c3                   	ret    $/;"	l
f38	sh.asm	/^     f38:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
f39	usertests.asm	/^     f39:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)$/;"	l
f3d	sh.asm	/^     f3d:	cd 40                	int    $0x40$/;"	l
f3f	sh.asm	/^     f3f:	c3                   	ret    $/;"	l
f4	echo.asm	/^  f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	grep.asm	/^  f4:	c3                   	ret    $/;"	l
f4	init.asm	/^  f4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f4	ln.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	usertests.asm	/^      f4:	83 ec 18             	sub    $0x18,%esp$/;"	l
f40	sh.asm	/^     f40:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
f40	usertests.asm	/^     f40:	7e c6                	jle    f08 <sharedfd+0x92>$/;"	l
f42	usertests.asm	/^     f42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
f45	sh.asm	/^     f45:	cd 40                	int    $0x40$/;"	l
f46	usertests.asm	/^     f46:	75 05                	jne    f4d <sharedfd+0xd7>$/;"	l
f47	sh.asm	/^     f47:	c3                   	ret    $/;"	l
f48	sh.asm	/^     f48:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
f48	usertests.asm	/^     f48:	e8 bb 30 00 00       	call   4008 <exit>$/;"	l
f4d	sh.asm	/^     f4d:	cd 40                	int    $0x40$/;"	l
f4d	usertests.asm	/^     f4d:	e8 be 30 00 00       	call   4010 <wait>$/;"	l
f4f	sh.asm	/^     f4f:	c3                   	ret    $/;"	l
f5	forktest.asm	/^  f5:	90                   	nop$/;"	l
f5	grep.asm	/^  f5:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f5	kill.asm	/^  f5:	0f b6 d0             	movzbl %al,%edx$/;"	l
f5	ls.asm	/^  f5:	83 ec 08             	sub    $0x8,%esp$/;"	l
f5	sh.asm	/^      f5:	85 c0                	test   %eax,%eax$/;"	l
f5	wc.asm	/^  f5:	ff 71 fc             	push   -0x4(%ecx)$/;"	l
f5	zombie.asm	/^  f5:	e8 32 ff ff ff       	call   2c <stosb>$/;"	l
f50	sh.asm	/^     f50:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f52	usertests.asm	/^     f52:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f55	sh.asm	/^     f55:	cd 40                	int    $0x40$/;"	l
f55	usertests.asm	/^     f55:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
f57	sh.asm	/^     f57:	c3                   	ret    $/;"	l
f58	sh.asm	/^     f58:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f58	usertests.asm	/^     f58:	e8 d3 30 00 00       	call   4030 <close>$/;"	l
f5d	sh.asm	/^     f5d:	cd 40                	int    $0x40$/;"	l
f5d	usertests.asm	/^     f5d:	83 c4 10             	add    $0x10,%esp$/;"	l
f5f	sh.asm	/^     f5f:	c3                   	ret    $/;"	l
f6	echo.asm	/^  f6:	29 c8                	sub    %ecx,%eax$/;"	l
f6	forktest.asm	/^  f6:	c9                   	leave  $/;"	l
f6	mkdir.asm	/^  f6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6	rm.asm	/^  f6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6	stressfs.asm	/^  f6:	83 c4 10             	add    $0x10,%esp$/;"	l
f60	sh.asm	/^     f60:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
f60	usertests.asm	/^     f60:	83 ec 08             	sub    $0x8,%esp$/;"	l
f63	usertests.asm	/^     f63:	6a 00                	push   $0x0$/;"	l
f65	sh.asm	/^     f65:	cd 40                	int    $0x40$/;"	l
f65	usertests.asm	/^     f65:	68 aa 4a 00 00       	push   $0x4aaa$/;"	l
f67	sh.asm	/^     f67:	c3                   	ret    $/;"	l
f68	sh.asm	/^     f68:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
f6a	usertests.asm	/^     f6a:	e8 d9 30 00 00       	call   4048 <open>$/;"	l
f6d	sh.asm	/^     f6d:	cd 40                	int    $0x40$/;"	l
f6f	sh.asm	/^     f6f:	c3                   	ret    $/;"	l
f6f	usertests.asm	/^     f6f:	83 c4 10             	add    $0x10,%esp$/;"	l
f7	cat.asm	/^  f7:	83 c4 10             	add    $0x10,%esp$/;"	l
f7	forktest.asm	/^  f7:	c3                   	ret    $/;"	l
f7	init.asm	/^  f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax$/;"	l
f7	ln.asm	/^  f7:	0f b6 d0             	movzbl %al,%edx$/;"	l
f7	sh.asm	/^      f7:	75 12                	jne    10b <runcmd+0x10b>$/;"	l
f7	usertests.asm	/^      f7:	a1 8c 64 00 00       	mov    0x648c,%eax$/;"	l
f70	sh.asm	/^     f70:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
f72	usertests.asm	/^     f72:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
f75	sh.asm	/^     f75:	cd 40                	int    $0x40$/;"	l
f75	usertests.asm	/^     f75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
f77	sh.asm	/^     f77:	c3                   	ret    $/;"	l
f78	sh.asm	/^     f78:	55                   	push   %ebp$/;"	l
f79	sh.asm	/^     f79:	89 e5                	mov    %esp,%ebp$/;"	l
f79	usertests.asm	/^     f79:	79 17                	jns    f92 <sharedfd+0x11c>$/;"	l
f7b	sh.asm	/^     f7b:	83 ec 18             	sub    $0x18,%esp$/;"	l
f7b	usertests.asm	/^     f7b:	83 ec 08             	sub    $0x8,%esp$/;"	l
f7e	sh.asm	/^     f7e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7e	usertests.asm	/^     f7e:	68 00 4b 00 00       	push   $0x4b00$/;"	l
f8	echo.asm	/^  f8:	5d                   	pop    %ebp$/;"	l
f8	forktest.asm	/^  f8:	55                   	push   %ebp$/;"	l
f8	kill.asm	/^  f8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f8	ls.asm	/^  f8:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax$/;"	l
f8	wc.asm	/^  f8:	55                   	push   %ebp$/;"	l
f81	sh.asm	/^     f81:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
f83	usertests.asm	/^     f83:	6a 01                	push   $0x1$/;"	l
f84	sh.asm	/^     f84:	83 ec 04             	sub    $0x4,%esp$/;"	l
f85	usertests.asm	/^     f85:	e8 f2 31 00 00       	call   417c <printf>$/;"	l
f87	sh.asm	/^     f87:	6a 01                	push   $0x1$/;"	l
f89	sh.asm	/^     f89:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
f8a	usertests.asm	/^     f8a:	83 c4 10             	add    $0x10,%esp$/;"	l
f8c	sh.asm	/^     f8c:	50                   	push   %eax$/;"	l
f8d	sh.asm	/^     f8d:	ff 75 08             	push   0x8(%ebp)$/;"	l
f8d	usertests.asm	/^     f8d:	e9 c5 00 00 00       	jmp    1057 <sharedfd+0x1e1>$/;"	l
f9	echo.asm	/^  f9:	c3                   	ret    $/;"	l
f9	forktest.asm	/^  f9:	89 e5                	mov    %esp,%ebp$/;"	l
f9	grep.asm	/^  f9:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
f9	mkdir.asm	/^  f9:	84 c0                	test   %al,%al$/;"	l
f9	rm.asm	/^  f9:	84 c0                	test   %al,%al$/;"	l
f9	sh.asm	/^      f9:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f9	stressfs.asm	/^  f9:	83 ec 08             	sub    $0x8,%esp$/;"	l
f9	wc.asm	/^  f9:	89 e5                	mov    %esp,%ebp$/;"	l
f90	sh.asm	/^     f90:	e8 63 ff ff ff       	call   ef8 <write>$/;"	l
f92	usertests.asm	/^     f92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
f95	sh.asm	/^     f95:	83 c4 10             	add    $0x10,%esp$/;"	l
f98	sh.asm	/^     f98:	90                   	nop$/;"	l
f99	sh.asm	/^     f99:	c9                   	leave  $/;"	l
f99	usertests.asm	/^     f99:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9a	sh.asm	/^     f9a:	c3                   	ret    $/;"	l
f9b	sh.asm	/^     f9b:	55                   	push   %ebp$/;"	l
f9c	sh.asm	/^     f9c:	89 e5                	mov    %esp,%ebp$/;"	l
f9c	usertests.asm	/^     f9c:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f9e	sh.asm	/^     f9e:	83 ec 28             	sub    $0x28,%esp$/;"	l
f9f	usertests.asm	/^     f9f:	eb 3b                	jmp    fdc <sharedfd+0x166>$/;"	l
fa	cat.asm	/^  fa:	e8 83 02 00 00       	call   382 <exit>$/;"	l
fa	echo.asm	/^  fa:	55                   	push   %ebp$/;"	l
fa	init.asm	/^  fa:	75 d4                	jne    d0 <main+0xd0>$/;"	l
fa	ln.asm	/^  fa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fa	zombie.asm	/^  fa:	83 c4 0c             	add    $0xc,%esp$/;"	l
fa1	sh.asm	/^     fa1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
fa1	usertests.asm	/^     fa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
fa8	sh.asm	/^     fa8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
fa8	usertests.asm	/^     fa8:	eb 2a                	jmp    fd4 <sharedfd+0x15e>$/;"	l
faa	usertests.asm	/^     faa:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
fac	sh.asm	/^     fac:	74 17                	je     fc5 <printint+0x2a>$/;"	l
fad	usertests.asm	/^     fad:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fae	sh.asm	/^     fae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
fb	echo.asm	/^  fb:	89 e5                	mov    %esp,%ebp$/;"	l
fb	forktest.asm	/^  fb:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
fb	kill.asm	/^  fb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fb	mkdir.asm	/^  fb:	74 10                	je     10d <strcmp+0x27>$/;"	l
fb	rm.asm	/^  fb:	74 10                	je     10d <strcmp+0x27>$/;"	l
fb	wc.asm	/^  fb:	53                   	push   %ebx$/;"	l
fb0	usertests.asm	/^     fb0:	01 d0                	add    %edx,%eax$/;"	l
fb2	sh.asm	/^     fb2:	79 11                	jns    fc5 <printint+0x2a>$/;"	l
fb2	usertests.asm	/^     fb2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fb4	sh.asm	/^     fb4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
fb5	usertests.asm	/^     fb5:	3c 63                	cmp    $0x63,%al$/;"	l
fb7	usertests.asm	/^     fb7:	75 04                	jne    fbd <sharedfd+0x147>$/;"	l
fb9	usertests.asm	/^     fb9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
fbb	sh.asm	/^     fbb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fbd	usertests.asm	/^     fbd:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
fbe	sh.asm	/^     fbe:	f7 d8                	neg    %eax$/;"	l
fc	grep.asm	/^  fc:	ff 71 fc             	push   -0x4(%ecx)$/;"	l
fc	init.asm	/^  fc:	e9 66 ff ff ff       	jmp    67 <main+0x67>$/;"	l
fc	sh.asm	/^      fc:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fc	stressfs.asm	/^  fc:	6a 00                	push   $0x0$/;"	l
fc	usertests.asm	/^      fc:	83 ec 08             	sub    $0x8,%esp$/;"	l
fc	wc.asm	/^  fc:	51                   	push   %ecx$/;"	l
fc0	sh.asm	/^     fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
fc0	usertests.asm	/^     fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fc3	sh.asm	/^     fc3:	eb 06                	jmp    fcb <printint+0x30>$/;"	l
fc3	usertests.asm	/^     fc3:	01 d0                	add    %edx,%eax$/;"	l
fc5	sh.asm	/^     fc5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fc5	usertests.asm	/^     fc5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fc8	sh.asm	/^     fc8:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
fc8	usertests.asm	/^     fc8:	3c 70                	cmp    $0x70,%al$/;"	l
fca	usertests.asm	/^     fca:	75 04                	jne    fd0 <sharedfd+0x15a>$/;"	l
fcb	sh.asm	/^     fcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
fcc	usertests.asm	/^     fcc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd:	83 ec 10             	sub    $0x10,%esp$/;"	l
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	typeref:typename:int	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	83 ec 10             	sub    $0x10,%esp$/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	usertests.asm	/^     fd0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
fd4	usertests.asm	/^     fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fd5	sh.asm	/^     fd5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
fd7	usertests.asm	/^     fd7:	83 f8 09             	cmp    $0x9,%eax$/;"	l
fd8	sh.asm	/^     fd8:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
fda	usertests.asm	/^     fda:	76 ce                	jbe    faa <sharedfd+0x134>$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	typeref:typename:int	file:
fdc	usertests.asm	/^     fdc:	83 ec 04             	sub    $0x4,%esp$/;"	l
fdd	sh.asm	/^     fdd:	f7 f1                	div    %ecx$/;"	l
fdf	sh.asm	/^     fdf:	89 d1                	mov    %edx,%ecx$/;"	l
fdf	usertests.asm	/^     fdf:	6a 0a                	push   $0xa$/;"	l
fe	forktest.asm	/^  fe:	e8 26 ff ff ff       	call   29 <forktest>$/;"	l
fe	kill.asm	/^  fe:	0f b6 c8             	movzbl %al,%ecx$/;"	l
fe	ls.asm	/^  fe:	50                   	push   %eax$/;"	l
fe	stressfs.asm	/^  fe:	8d 45 e6             	lea    -0x1a(%ebp),%eax$/;"	l
fe1	sh.asm	/^     fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fe1	usertests.asm	/^     fe1:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
fe4	sh.asm	/^     fe4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
fe4	usertests.asm	/^     fe4:	50                   	push   %eax$/;"	l
fe5	usertests.asm	/^     fe5:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
fe7	sh.asm	/^     fe7:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
fe8	usertests.asm	/^     fe8:	e8 33 30 00 00       	call   4020 <read>$/;"	l
fea	sh.asm	/^     fea:	0f b6 91 8c 19 00 00 	movzbl 0x198c(%ecx),%edx$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	typeref:typename:uint
fed	usertests.asm	/^     fed:	83 c4 10             	add    $0x10,%esp$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f	typeref:typename:int
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f	typeref:typename:int
ff	cat.asm	/^  ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff	grep.asm	/^  ff:	55                   	push   %ebp$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	ls.asm	/^  ff:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
ff	sh.asm	/^      ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff	usertests.asm	/^      ff:	68 c6 45 00 00       	push   $0x45c6$/;"	l
ff0	usertests.asm	/^     ff0:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ff1	sh.asm	/^     ff1:	88 54 05 dc          	mov    %dl,-0x24(%ebp,%eax,1)$/;"	l
ff3	usertests.asm	/^     ff3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
ff5	sh.asm	/^     ff5:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
ff7	usertests.asm	/^     ff7:	7f a8                	jg     fa1 <sharedfd+0x12b>$/;"	l
ff8	sh.asm	/^     ff8:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ff9	usertests.asm	/^     ff9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ffb	sh.asm	/^     ffb:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffc	usertests.asm	/^     ffc:	ff 75 e8             	push   -0x18(%ebp)$/;"	l
fff	usertests.asm	/^     fff:	e8 2c 30 00 00       	call   4030 <close>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anonfd762eb60108	typeref:struct:file[]	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	typeref:typename:char *	file:
filealloc	file.c	/^filealloc(void)$/;"	f	typeref:struct:file *
fileclose	file.c	/^fileclose(struct file *f)$/;"	f	typeref:typename:void
filedup	file.c	/^filedup(struct file *f)$/;"	f	typeref:struct:file *
fileinit	file.c	/^fileinit(void)$/;"	f	typeref:typename:void
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f	typeref:typename:int
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	typeref:typename:uint
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	typeref:typename:void	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf	typeref:typename:int
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	typeref:typename:uint
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	typeref:typename:uint
flags	entry.S	/^  #define flags /;"	d	file:
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	typeref:typename:uchar
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	typeref:typename:uchar
fmtname	ls.c	/^fmtname(char *path)$/;"	f	typeref:typename:char *
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f	typeref:typename:int
fork1	sh.c	/^fork1(void)$/;"	f	typeref:typename:int
forkret	proc.c	/^forkret(void)$/;"	f	typeref:typename:void
forktest	forktest.c	/^forktest(void)$/;"	f	typeref:typename:void
forktest	usertests.c	/^forktest(void)$/;"	f	typeref:typename:void
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f	typeref:typename:void
fourteen	usertests.c	/^fourteen(void)$/;"	f	typeref:typename:void
free	umalloc.c	/^free(void *ap)$/;"	f	typeref:typename:void
freeblock	mkfs.c	/^uint freeblock;$/;"	v	typeref:typename:uint
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v	typeref:typename:uint
freelist	kalloc.c	/^  struct run *freelist; \/\/ 头插内存，每个run是一个page(4096)$/;"	m	struct:__anon69d64d0c0108	typeref:struct:run *	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	typeref:typename:Header *	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f	typeref:typename:void
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f	typeref:typename:void
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	typeref:typename:ushort
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe	typeref:typename:ushort
fs.img	Makefile	/^fs.img: mkfs README $(UPROGS)$/;"	t
fsfd	mkfs.c	/^int fsfd;$/;"	v	typeref:typename:int
fsfull	usertests.c	/^fsfull()$/;"	f	typeref:typename:void
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anonfd762eb60108
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	typeref:typename:uint:1
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:segdesc[]
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f	typeref:typename:void
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	typeref:typename:int
gets	ulib.c	/^gets(char *buf, int max)$/;"	f	typeref:typename:char *
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	typeref:typename:int
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f	typeref:typename:void
growproc	proc.c	/^growproc(int n)$/;"	f	typeref:typename:int
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	typeref:typename:ushort
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe	typeref:typename:ushort
havedisk1	ide.c	/^static int havedisk1;$/;"	v	typeref:typename:int	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f	typeref:typename:int
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f	typeref:typename:int
hook-stop	.gdbinit	/^define hook-stop$/;"	d
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate	typeref:typename:uint
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f	typeref:struct:inode *
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f	typeref:typename:uint
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	typeref:typename:void
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon7c96edaf0108
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
ideinit	ide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideinit	memide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideintr	ide.c	/^ideintr(void)$/;"	f	typeref:typename:void
ideintr	memide.c	/^ideintr(void)$/;"	f	typeref:typename:void
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf *	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
iderw	memide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	typeref:typename:void	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	typeref:typename:int	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc[256]
idtinit	trap.c	/^idtinit(void)$/;"	f	typeref:typename:void
idup	fs.c	/^idup(struct inode *ip)$/;"	f	typeref:struct:inode *
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	typeref:struct:inode *	file:
iinit	fs.c	/^iinit(int dev)$/;"	f	typeref:typename:void
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f	typeref:typename:void
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	typeref:typename:uchar
inb	x86.h	/^inb(ushort port)$/;"	f	typeref:typename:uchar
init	initcode.S	/^init:$/;"	l
initcode	Makefile	/^initcode: initcode.S$/;"	t
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f	typeref:typename:void
initlog	log.c	/^initlog(int dev)$/;"	f	typeref:typename:void
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc *	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f	typeref:typename:void
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f	typeref:typename:void
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat	typeref:typename:uint
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon7c96edaf0108	typeref:struct:inode[]	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock	typeref:typename:uint
input	console.c	/^} input;$/;"	v	typeref:struct:__anon96a473a90208
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	typeref:typename:void
install_trans	log.c	/^install_trans(void)$/;"	f	typeref:typename:void	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu	typeref:typename:int
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	typeref:typename:uint
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	typeref:typename:ushort
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inum	usertests.c	/^    ushort inum;$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:ushort	file:
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:typename:volatile struct ioapic *
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f	typeref:typename:void
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v	typeref:typename:uchar
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f	typeref:typename:void
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	typeref:typename:uint	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	typeref:typename:void	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	typeref:typename:ushort
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:inode *
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(myproc()->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f	typeref:typename:void
iputtest	usertests.c	/^iputtest(void)$/;"	f	typeref:typename:void
iref	usertests.c	/^iref(void)$/;"	f	typeref:typename:void
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	typeref:typename:int	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	typeref:typename:void	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f	typeref:typename:void
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f	typeref:typename:void
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f	typeref:typename:void
kalloc	kalloc.c	/^kalloc(void)$/;"	f	typeref:typename:char *
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f	typeref:typename:int
kbdintr	kbd.c	/^kbdintr(void)$/;"	f	typeref:typename:void
kernel	Makefile	/^kernel: $(OBJS) entry.o entryother initcode kernel.ld$/;"	t
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kernelmemfs	Makefile	/^kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img$/;"	t
kfree	kalloc.c	/^kfree(char *v)$/;"	f	typeref:typename:void
kill	proc.c	/^kill(int pid)$/;"	f	typeref:typename:int
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc	typeref:typename:int
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f	typeref:typename:void
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f	typeref:typename:void
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap[]
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon69d64d0c0108
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v	typeref:typename:pde_t *
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	typeref:typename:char *
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f	typeref:typename:void
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v	typeref:typename:volatile uint *
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	typeref:typename:uint *
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f	typeref:typename:void
lapicid	lapic.c	/^lapicid(void)$/;"	f	typeref:typename:int
lapicinit	lapic.c	/^lapicinit(void)$/;"	f	typeref:typename:void
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f	typeref:typename:void
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	typeref:typename:void	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lastcs	.gdbinit	/^set $lastcs = -1$/;"	t
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val)$/;"	f	typeref:typename:void
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	typeref:typename:ushort
left	runoff.spec	/^left: fs.c  # mild preference$/;"	t
left	runoff.spec	/^left: log.c$/;"	t
left	runoff.spec	/^left: mp.c$/;"	t
left	runoff.spec	/^left: proc.h$/;"	t
left	runoff.spec	/^left: spinlock.h$/;"	t
left	runoff.spec	/^left: vm.c$/;"	t
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	typeref:typename:uchar
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	typeref:typename:ushort
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f	typeref:typename:void
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f	typeref:typename:void
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:16
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:4
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	typeref:typename:uint
linktest	usertests.c	/^linktest(void)$/;"	f	typeref:typename:void
linkunlink	usertests.c	/^linkunlink()$/;"	f	typeref:typename:void
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f	typeref:typename:void
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f	typeref:typename:int
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon96a473a90108	typeref:struct:spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anonfd762eb60108	typeref:struct:spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon7c96edaf0108	typeref:struct:spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon156e3e2a0108	typeref:struct:spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock	typeref:typename:uint
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock	typeref:typename:uint
locking	console.c	/^  int locking;$/;"	m	struct:__anon96a473a90108	typeref:typename:int	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f	typeref:typename:void
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock	typeref:typename:uint
ls	ls.c	/^ls(char *path)$/;"	f	typeref:typename:void
ltr	x86.h	/^ltr(ushort sel)$/;"	f	typeref:typename:void
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	typeref:typename:ushort
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	typeref:typename:uint
magic	entry.S	/^  #define magic /;"	d	file:
main	cat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	echo.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	forktest.c	/^main(void)$/;"	f	typeref:typename:int
main	grep.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	init.c	/^main(void)$/;"	f	typeref:typename:int
main	kill.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main	ln.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	ls.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	main.c	/^main(void)$/;"	f	typeref:typename:int
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	rm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	sh.c	/^main(void)$/;"	f	typeref:typename:int
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	usertests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	wc.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	zombie.c	/^main(void)$/;"	f	typeref:typename:int
major	file.h	/^  short major;$/;"	m	struct:inode	typeref:typename:short
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f	typeref:typename:void *
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	typeref:typename:int	file:
match	grep.c	/^match(char *re, char *text)$/;"	f	typeref:typename:int
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f	typeref:typename:int
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	typeref:typename:int
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f	typeref:typename:void
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	typeref:typename:int
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	typeref:typename:uchar *	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f	typeref:typename:void *
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	typeref:typename:uint
microdelay	lapic.c	/^microdelay(int us)$/;"	f	typeref:typename:void
min	fs.c	/^#define min(/;"	d	file:
min	mkfs.c	/^#define min(/;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode	typeref:typename:short
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate	typeref:typename:uint
mkfs	Makefile	/^mkfs: mkfs.c fs.h$/;"	t
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	typeref:typename:int	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate	typeref:typename:uint
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	typeref:typename:Header *	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	typeref:struct:mpconf *	file:
mpenter	main.c	/^mpenter(void)$/;"	f	typeref:typename:void	file:
mpinit	mp.c	/^mpinit(void)$/;"	f	typeref:typename:void
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	typeref:typename:void	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	typeref:struct:mp *	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	typeref:struct:mp *	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f	typeref:struct:cpu *
myproc	proc.c	/^myproc(void) {$/;"	f	typeref:struct:proc *
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	typeref:typename:int	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^    ret$/;"	l
name	echo.asm	/^    ret$/;"	l
name	forktest.asm	/^    ret$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	typeref:typename:char[]
name	grep.asm	/^    ret$/;"	l
name	init.asm	/^    ret$/;"	l
name	kill.asm	/^    ret$/;"	l
name	ln.asm	/^    ret$/;"	l
name	ls.asm	/^    ret$/;"	l
name	mkdir.asm	/^    ret$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc	typeref:typename:char[16]
name	rm.asm	/^    ret$/;"	l
name	sh.asm	/^    ret$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock	typeref:typename:char *
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock	typeref:typename:char *
name	stressfs.asm	/^    ret$/;"	l
name	usertests.asm	/^    ret$/;"	l
name	usertests.c	/^    char name[14];$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:char[14]	file:
name	usertests.c	/^char name[3];$/;"	v	typeref:typename:char[3]
name	wc.asm	/^    ret$/;"	l
name	zombie.asm	/^    ret$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f	typeref:typename:int
namei	fs.c	/^namei(char *path)$/;"	f	typeref:struct:inode *
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f	typeref:struct:inode *
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	typeref:struct:inode *	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v	typeref:typename:int
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	typeref:typename:uint
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v	typeref:typename:int
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu	typeref:typename:int
ncpu	mp.c	/^int ncpu;$/;"	v	typeref:typename:int
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf *
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run *	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v	typeref:typename:int
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v	typeref:typename:int
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	typeref:typename:uint
nlink	file.h	/^  short nlink;$/;"	m	struct:inode	typeref:typename:short
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	typeref:typename:short
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	typeref:typename:short
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock	typeref:typename:uint
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v	typeref:typename:int
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v	typeref:typename:int
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v	typeref:typename:uchar[256]
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	typeref:typename:uint	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	typeref:struct:cmd *
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	typeref:typename:uint	file:
odd	runoff.spec	/^odd: fs.c   # VERY important$/;"	t
odd	runoff.spec	/^odd: sh.c$/;"	t
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	typeref:typename:ushort
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	typeref:typename:uint *
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	typeref:typename:uint
off	elf.h	/^  uint off;$/;"	m	struct:proghdr	typeref:typename:uint
off	file.h	/^  uint off;$/;"	m	struct:file	typeref:typename:uint
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:file * []
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f	typeref:typename:void
opentest	usertests.c	/^opentest(void)$/;"	f	typeref:typename:void
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f	typeref:typename:void
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	typeref:typename:void
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	typeref:typename:int	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f	typeref:typename:void
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc(); \/\/ ptable.proc取一个status=UNUSED的proc出来 $/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	typeref:typename:uint:1
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	typeref:typename:uint:1
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	typeref:typename:uint[3]	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	typeref:typename:ushort
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	typeref:typename:ushort
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	typeref:typename:ushort
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	typeref:typename:ushort
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	typeref:typename:ushort
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	typeref:typename:ushort
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	typeref:typename:ushort
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	typeref:typename:ushort
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe	typeref:typename:ushort
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	typeref:typename:ushort
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe	typeref:typename:ushort
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	typeref:typename:ushort
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	typeref:typename:ushort
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	typeref:typename:ushort
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr	typeref:typename:uint
panic	console.c	/^panic(char *s)$/;"	f	typeref:typename:void
panic	sh.c	/^panic(char *s)$/;"	f	typeref:typename:void
panicked	console.c	/^static int panicked = 0;$/;"	v	typeref:typename:int	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc *
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f	typeref:struct:cmd *
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	typeref:struct:cmd *
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	typeref:typename:uint[10]
pde	kernel.asm	/^  pde = &pgdir[PDX(va)]; \/\/ PDX(va) => 获取va的前10位，pde元素存储的是物理地址$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t	typeref:typename:uint
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	typeref:typename:int
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	typeref:typename:int	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc	typeref:typename:pde_t *
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde)); \/\/ PTE_ADDR(addr) =>  ((uint)(pte) & ~0xFFF)$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	typeref:typename:uint
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	typeref:typename:uint	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	typeref:typename:uint	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	typeref:typename:void *
picinit	picirq.c	/^picinit(void)$/;"	f	typeref:typename:void
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc	typeref:typename:int
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock	typeref:typename:int
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f	typeref:typename:void
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:pipe *
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f	typeref:typename:void
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	typeref:typename:int
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f	typeref:typename:void
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
popcli	spinlock.c	/^popcli(void)$/;"	f	typeref:typename:void
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f	typeref:typename:void
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf *
print	Makefile	/^print: xv6.pdf$/;"	t
printf	forktest.c	/^printf(int fd, const char *s, ...)$/;"	f	typeref:typename:void
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f	typeref:typename:void
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	typeref:typename:void	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	typeref:typename:void	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon156e3e2a0108	typeref:struct:proc[]	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:proc *
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f	typeref:typename:void
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	typeref:typename:uchar[20]
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon156e3e2a0108
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t	typeref:typename:uint
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anonf5a2dce30108	typeref:union:header *	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f	typeref:typename:void
putc	printf.c	/^putc(int fd, char c)$/;"	f	typeref:typename:void	file:
qemu	Makefile	/^qemu: fs.img xv6.img$/;"	t
qemu-gdb	Makefile	/^qemu-gdb: fs.img xv6.img .gdbinit$/;"	t
qemu-memfs	Makefile	/^qemu-memfs: xv6memfs.img$/;"	t
qemu-nox	Makefile	/^qemu-nox: fs.img xv6.img$/;"	t
qemu-nox-gdb	Makefile	/^qemu-nox-gdb: fs.img xv6.img .gdbinit$/;"	t
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf *
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f	typeref:typename:unsigned int
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v	typeref:typename:unsigned long
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f	typeref:typename:uint
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
read_head	log.c	/^read_head(void)$/;"	f	typeref:typename:void	file:
readable	file.h	/^  char readable;$/;"	m	struct:file	typeref:typename:char
readeflags	x86.h	/^readeflags(void)$/;"	f	typeref:typename:uint
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f	typeref:typename:int
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	typeref:typename:void
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f	typeref:typename:void
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f	typeref:typename:void
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	typeref:typename:void	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	typeref:struct:cmd *
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	typeref:typename:int
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	typeref:typename:int
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf	typeref:typename:uint
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	typeref:typename:uint	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f	typeref:typename:void
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	typeref:typename:uchar
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	typeref:typename:uchar[3]
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	typeref:typename:uchar[8]
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	runoff.spec	/^right: proc.c   # VERY important$/;"	t
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
rmdot	usertests.c	/^rmdot(void)$/;"	f	typeref:typename:void
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	typeref:typename:void
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	typeref:typename:uint:1
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	typeref:typename:uint:3
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f	typeref:typename:void
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	typeref:typename:uint:1
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	typeref:typename:uint:1
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anonf5a2dce30108	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f	typeref:typename:void
sched	proc.c	/^sched(void)$/;"	f	typeref:typename:void
scheduler	proc.c	/^scheduler(void)$/;"	f	typeref:typename:void
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:context *
second	date.h	/^  uint second;$/;"	m	struct:rtcdate	typeref:typename:uint
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f	typeref:typename:void
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f	typeref:typename:pde_t *
sharedfd	usertests.c	/^sharedfd(void)$/;"	f	typeref:typename:void
sheet1	runoff.spec	/^sheet1: left$/;"	t
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v	typeref:typename:uchar[256]
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v	typeref:typename:uchar[256]
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	typeref:typename:uint
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	typeref:typename:ushort
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	typeref:typename:uchar[4]
size	file.h	/^  uint size;$/;"	m	struct:inode	typeref:typename:uint
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	typeref:typename:uint
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	typeref:typename:uint
size	log.c	/^  int size;$/;"	m	struct:log	typeref:typename:int	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	typeref:typename:uint
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anonf5a2dce30108	typeref:typename:uint	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	typeref:typename:char *	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	typeref:typename:void
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	typeref:typename:uchar
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	typeref:typename:ushort
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	typeref:typename:ushort
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	typeref:typename:ushort
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	typeref:typename:ushort
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	typeref:typename:ushort
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	typeref:typename:int	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu	typeref:typename:volatile uint
startothers	main.c	/^startothers(void)$/;"	f	typeref:typename:void	file:
stat	mkfs.c	/^#define stat /;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f	typeref:typename:int
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	typeref:typename:void
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	/^#define static_assert(/;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v	typeref:typename:int
sti	x86.h	/^sti(void)$/;"	f	typeref:typename:void
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f	typeref:typename:char *
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	typeref:typename:int
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f	typeref:typename:char *
strlen	string.c	/^strlen(const char *s)$/;"	f	typeref:typename:int
strlen	ulib.c	/^strlen(const char *s)$/;"	f	typeref:typename:uint
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	typeref:typename:int
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f	typeref:typename:void
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	typeref:typename:uchar	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f	typeref:typename:void
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f	typeref:typename:void
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v	typeref:typename:char[]
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f	typeref:typename:int
sys_close	sysfile.c	/^sys_close(void)$/;"	f	typeref:typename:int
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f	typeref:typename:int
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f	typeref:typename:int
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f	typeref:typename:int
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f	typeref:typename:int
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f	typeref:typename:int
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f	typeref:typename:int
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f	typeref:typename:int
sys_link	sysfile.c	/^sys_link(void)$/;"	f	typeref:typename:int
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f	typeref:typename:int
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f	typeref:typename:int
sys_open	sysfile.c	/^sys_open(void)$/;"	f	typeref:typename:int
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f	typeref:typename:int
sys_read	sysfile.c	/^sys_read(void)$/;"	f	typeref:typename:int
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f	typeref:typename:int
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f	typeref:typename:int
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f	typeref:typename:int
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f	typeref:typename:int
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f	typeref:typename:int
sys_write	sysfile.c	/^sys_write(void)$/;"	f	typeref:typename:int
syscall	syscall.c	/^syscall(void)$/;"	f	typeref:typename:void
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	typeref:typename:int (* [])(void)	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc	typeref:typename:uint
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	typeref:typename:ushort
tags	Makefile	/^tags: $(OBJS) entryother.S _init$/;"	t
tar	Makefile	/^tar:$/;"	t
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:trapframe *
ticks	trap.c	/^uint ticks;$/;"	v	typeref:typename:uint
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v	typeref:typename:uchar[256]
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f	typeref:typename:void
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	typeref:typename:uint
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f	typeref:typename:void
type	elf.h	/^  uint type;$/;"	m	struct:proghdr	typeref:typename:uint
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	typeref:typename:ushort
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anonfd762ebb0103
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	typeref:typename:short
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	typeref:typename:short
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc	typeref:typename:uint:4
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	typeref:typename:uint:4
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	typeref:typename:uchar
type	sh.c	/^  int type;$/;"	m	struct:backcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	typeref:typename:int	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	typeref:typename:short
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	typeref:typename:int	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	typeref:typename:int	file:
uartinit	uart.c	/^uartinit(void)$/;"	f	typeref:typename:void
uartintr	uart.c	/^uartintr(void)$/;"	f	typeref:typename:void
uartputc	uart.c	/^uartputc(int c)$/;"	f	typeref:typename:void
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t	typeref:typename:unsigned char
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t	typeref:typename:unsigned int
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uio	usertests.c	/^uio()$/;"	f	typeref:typename:void
uninit	usertests.c	/^char uninit[10000];$/;"	v	typeref:typename:char[10000]
unlinkread	usertests.c	/^unlinkread(void)$/;"	f	typeref:typename:void
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon69d64d0c0108	typeref:typename:int	file:
userinit	proc.c	/^userinit(void)$/;"	f	typeref:typename:void
ushort	types.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:char *
v2p	v2p.gdb	/^define v2p$/;"	d
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr	typeref:typename:uint
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode	typeref:typename:int
validateint	usertests.c	/^validateint(int *p)$/;"	f	typeref:typename:void
validatetest	usertests.c	/^validatetest(void)$/;"	f	typeref:typename:void
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
vectors.S	Makefile	/^vectors.S: vectors.pl$/;"	t
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	typeref:typename:uint
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	typeref:typename:uchar
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	typeref:typename:void *	file:
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
wait	proc.c	/^wait(void)$/;"	f	typeref:typename:int
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f	typeref:typename:void
wakeup	proc.c	/^wakeup(void *chan)$/;"	f	typeref:typename:void
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	typeref:typename:void	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	typeref:typename:pte_t *	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f	typeref:typename:void
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v	typeref:typename:char[]
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
writable	file.h	/^  char writable;$/;"	m	struct:file	typeref:typename:char
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
write_head	log.c	/^write_head(void)$/;"	f	typeref:typename:void	file:
write_log	log.c	/^write_log(void)$/;"	f	typeref:typename:void	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f	typeref:typename:int
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
writetest	usertests.c	/^writetest(void)$/;"	f	typeref:typename:void
writetest1	usertests.c	/^writetest1(void)$/;"	f	typeref:typename:void
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	typeref:typename:void
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	typeref:typename:Align	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	typeref:typename:uchar
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f	typeref:typename:uint
xint	mkfs.c	/^xint(uint x)$/;"	f	typeref:typename:uint
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	typeref:typename:ushort
xshort	mkfs.c	/^xshort(ushort x)$/;"	f	typeref:typename:ushort
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
xv6.img	Makefile	/^xv6.img: bootblock kernel$/;"	t
xv6.pdf	Makefile	/^xv6.pdf: $(PRINT)$/;"	t
xv6memfs.img	Makefile	/^xv6memfs.img: bootblock kernelmemfs$/;"	t
year	date.h	/^  uint year;$/;"	m	struct:rtcdate	typeref:typename:uint
yield	proc.c	/^yield(void)$/;"	f	typeref:typename:void
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v	typeref:typename:char[]
